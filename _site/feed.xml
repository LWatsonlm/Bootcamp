<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Tech Eats: Stories of Tech and Food</title>
		<description>Tech Eats: Tech and Food Stuff</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 13 in The Life of a Coding Bootcamper. Finale</title>
				<description>&lt;p&gt;Hey you! You made it. You made the journey with me to the last final week of class and the big Project 4 finale. It’s been a long road and now it’s almost time to say goodbye. This week, our instructors provided two elective classes, an Instructor AMA (Ask Me Anything, famous from Reddit) and Project 4 Presentations were due. On the very last day of class, we reflected with our classmates, pop champagne and discussed life after WDI with the Outcomes team. Let’s go!&lt;/p&gt;

&lt;h1 id=&quot;day-1-one-on-ones-and-independent-project-work&quot;&gt;Day 1: One on Ones and Independent Project Work&lt;/h1&gt;

&lt;p&gt;Today, we didn’t have anything else to do but work, work, work, work, work. An instructor was available to answer any questions from 1:30pm - 2:30pm, exactly one hour of the day. Otherwise, all questions were to be submitted as Github Issues on the general project repo.&lt;/p&gt;

&lt;h1 id=&quot;day-2-project-work-and-intro-to-react-native&quot;&gt;Day 2: Project Work and Intro to React Native&lt;/h1&gt;

&lt;p&gt;Again, an instructor was available for one hour of the day. All issues or questions were to be submitted through Github as an issue. Luckily, the instructors were very quick to respond to issues and provide help online. Also, as a class, we helped each other a lot through difficult bugs. It’s really impressive to see how far everyone has come in their journey of learning to programming. I was truly lucky to have such an amazing cohort, full of bright, helpful and eager individuals.&lt;/p&gt;

&lt;p&gt;Okay, enough of the sappy talk.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-react-native-25-hours&quot;&gt;Intro to React Native: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-native.png&quot; alt=&quot;React Native&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React Native is a framework for building cross-platform apps. React Native is like React, but it uses native components instead of web components as building blocks. This lesson only covered iOS development, that once learned, can be ported into creating an Android app very quickly.&lt;/p&gt;

&lt;p&gt;Unfortunately, I did not attend this elective. I didn’t think my brain could handle any more new information and I was too focused on my project to even get up and take a bathroom break. But I’ll share with you the learning objectives.&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives&quot;&gt;Learning Objectives:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the problem React Native solves and its approach to solving it&lt;/li&gt;
  &lt;li&gt;Build an iOS app with React Native&lt;/li&gt;
  &lt;li&gt;Utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TextInput&lt;/code&gt; components to construct native screens&lt;/li&gt;
  &lt;li&gt;Explain how to style components in a React Native application&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-3-project-work-and-custom-deployment&quot;&gt;Day 3: Project Work and Custom Deployment&lt;/h1&gt;

&lt;p&gt;All morning was all work and barely any play. In the afternoon, our official last class was available as an elective: Custom Deployment.&lt;/p&gt;

&lt;h2 id=&quot;custom-deployment-25-hours&quot;&gt;Custom Deployment: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Today, I was feeling good about the progress I’ve made in my project so I decided to give myself a break and learn about custom deployments! So far in class, we’ve deployed our apps using Heroku, Github Pages and Firebase. Today, we learned how to deploy our apps using Digital Ocean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161130_144513.jpg&quot; alt=&quot;Digital Ocean Picture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives-1&quot;&gt;Learning Objectives:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Create a Digital Ocean droplet&lt;/li&gt;
  &lt;li&gt;Log into a server via SSH&lt;/li&gt;
  &lt;li&gt;Install dependencies on a server&lt;/li&gt;
  &lt;li&gt;Install a webserver&lt;/li&gt;
  &lt;li&gt;Clone an application to a Virtual Private Server (VPS)&lt;/li&gt;
  &lt;li&gt;Set up a domain and proxy server&lt;/li&gt;
  &lt;li&gt;Configure a reverse proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you’re like me, you might be asking yourself, “Heroku worked just fine… why learn something new?”. With Heroku, deploying to Heroku requires a very specific configuration and customization is very limited.  With Digital Ocean, you have customization, you can install whatever dependencies you want - whether it’s gems, npm modules, etc. So, it’s worth getting an understanding for when we start building bigger apps, with more dependencies and need the flexibility.&lt;/p&gt;

&lt;p&gt;So as a class, we registered for a Digital Ocean account and walked through the learning objectives together.&lt;/p&gt;

&lt;p&gt;One notable thing, it was my first time actually using &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;. I’ve seen that word before but today I found out it’s a web server. Most popular for being fast with low memory usage and that it can act as a reverse proxy server. You can easily install it using the command line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ll know nginx is up and running if you see something like this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/nginx.png&quot; alt=&quot;nginx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool.&lt;/p&gt;

&lt;h1 id=&quot;day-4-instructors-ama&quot;&gt;Day 4: Instructors AMA&lt;/h1&gt;

&lt;p&gt;So it’s the last day before graduation and yes there’s still work to be done! However, there was no way I was missing an instructor AMA, aka, ASK ME ANYTHING! Made famous from Reddit, AMA is when famous people or someone with an interesting role or story opens up a forum and you can ask them anything. Literally, anything you want!&lt;/p&gt;

&lt;p&gt;This was a lot of fun because we really got to know our instructors more… questions ranged from “How hard is it to code in real life with real humans?” to “What do you think is the meaning of life?”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/AMA.JPG&quot; alt=&quot;Shot of AMA&quot; /&gt;&lt;/p&gt;
&lt;center&gt;How amazing is this shot? Looks like an album cover. Kudos to my classmate Mike Rubin for the pic!&lt;/center&gt;

&lt;h1 id=&quot;day-5-presentations-graduation-and-reflections&quot;&gt;Day 5: Presentations, Graduation and Reflections&lt;/h1&gt;

&lt;p&gt;It’s the BIG day, folks! Time to talk about the project.&lt;/p&gt;

&lt;h2 id=&quot;project-overview&quot;&gt;Project Overview&lt;/h2&gt;

&lt;p&gt;We’ve come a long way, and it’s time to show it. This will be the most advanced project to date, and if you put creativity into it, it’ll hopefully be the thing you want to show off most prominently in your portfolio.&lt;/p&gt;

&lt;p&gt;We get to call the shots and invent our own idea, choosing a framework &amp;amp; tools that are appropriate for what we want to build. Pull from everything we’ve learned so far, and tackle something that’ll push us a little outside of our comfort zone.&lt;/p&gt;

&lt;p&gt;Make sure to review the project proposal with an instructor so we can make sure it’s something that can be accomplish in the limited time we have, and make sure it’s something that’ll be impressive visually. Sometimes people do judge a book by its cover – or an app by its design.&lt;/p&gt;

&lt;h2 id=&quot;technical-suggestions&quot;&gt;Technical Suggestions&lt;/h2&gt;

&lt;h3 id=&quot;your-app-must&quot;&gt;Your app must:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Be a complete product, which most likely means multiple relationships and CRUD functionality for at least a couple models&lt;/li&gt;
  &lt;li&gt;Implement thoughtful user stories that are significant enough to help you know which features to build and which to scrap&lt;/li&gt;
  &lt;li&gt;Be deployed online so it’s publicly accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-did-i-do&quot;&gt;What Did I Do?&lt;/h2&gt;

&lt;h2 id=&quot;background-story&quot;&gt;Background Story&lt;/h2&gt;

&lt;p&gt;Going out on a budget is hard. After spending 14 weeks unemployed while attending General Assembly, going out is almost impossible without busting your budget for the week.&lt;/p&gt;

&lt;p&gt;Every night, my friends and I researched bars with the best drink specials. The number one question in mind… where are all of the drink specials? And &lt;strong&gt;$ip&lt;/strong&gt; was born.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$ip&lt;/strong&gt; will only show you bottomless drink specials that are under $15. In most cases, the drink special is FREE!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/$ip.png&quot; alt=&quot;$ip Screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of main page for $ip&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/collage-sip.jpg&quot; alt=&quot;$ip Collage&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Collage of screenshots&lt;/center&gt;

&lt;h2 id=&quot;technologies-used&quot;&gt;Technologies Used&lt;/h2&gt;

&lt;p&gt;$ip is a full CRUD, MEAN Application with a Google Maps API. It’s built with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AngualarJS&lt;/li&gt;
  &lt;li&gt;MongoDB&lt;/li&gt;
  &lt;li&gt;Mongoose&lt;/li&gt;
  &lt;li&gt;Express&lt;/li&gt;
  &lt;li&gt;Nodejs&lt;/li&gt;
  &lt;li&gt;Google Maps API for Plotting Data on the Map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created my own API that you can &lt;a href=&quot;https://sip-dc.herokuapp.com/api/drinks&quot;&gt;view/use here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;live-demo&quot;&gt;Live Demo&lt;/h2&gt;

&lt;p&gt;So you can check out my app, $ip, right now by visiting it’s &lt;a href=&quot;https://sip-dc.herokuapp.com/&quot;&gt;live demo link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If interested, you can check out &lt;a href=&quot;https://github.com/LWatsonlm/Sip&quot;&gt;my Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s how to run the app from Github:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mongod&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ nodemon index.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;upcoming-features&quot;&gt;Upcoming Features&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Remove the show view and corresponding show router and use modals instead, making it a true SPA.&lt;/li&gt;
  &lt;li&gt;When you click on a marker on the map, details appear regarding the location.&lt;/li&gt;
  &lt;li&gt;Adding Google Places API, so users can search inside the Google Map for locations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;presentations&quot;&gt;Presentations&lt;/h2&gt;

&lt;p&gt;We had presentations in the same style of project one… science fair style. Remember that? It’s when everyone stands up at their individual spots in the room and show off your project to anyone who walks to you. Definitely much more preferred than standing up in front of the room and presenting.&lt;/p&gt;

&lt;p&gt;One of the best feelings in the world is watching people light up when their interacting with something you built. I loved being able to be proud of my work and show off it’s beauty. It helps that it’s an app focusing on drinking deals because who doesn’t love a good deal on alcohol?!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/classmates.jpg&quot; alt=&quot;classmates viewing my app&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/classmates2.jpg&quot; alt=&quot;classmates viewing my app2&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Classmates interacting with $ip! Love it!&lt;/center&gt;

&lt;h1 id=&quot;day-5-graduation-and-reflections&quot;&gt;Day 5: Graduation and Reflections&lt;/h1&gt;

&lt;p&gt;After everyone had a chance to present their project, it was time to reflect on everything we’ve learned and how much we’ve grown.&lt;/p&gt;

&lt;p&gt;We were told to grab a piece of paper and a piece of tape and turn to the left and tape that paper on our neighbor’s back. Remember those days in grade school where you would wear a white shirt and let people write notes with markers on it? Or how our year books had blank pages towards the end so your friends could write messages saying “stay true”… “never change!” … this was that type of party.&lt;/p&gt;

&lt;p&gt;Since I actually like these people, today wasn’t as painful as middle school.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/reflections.jpg&quot; alt=&quot;reflecting&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/refelections2.jpg&quot; alt=&quot;reflecting&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/reflections3.jpg&quot; alt=&quot;reflecting&quot; /&gt;&lt;/p&gt;
&lt;center&gt;You write on my back, I'll write on yours!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here’s what I got back from … my back:
&lt;img src=&quot;/img/my-back.jpg&quot; alt=&quot;What my classmates think about me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, we popped champagne (no really! We had 6 bottles of champagne!) and cheers to our victory. Then we took a super awkward group picture haha.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bad-class-pic.JPG&quot; alt=&quot;Group Picture&quot; /&gt;&lt;/p&gt;
&lt;center&gt;lol&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And that was that. Another chapter closed in my life.&lt;/p&gt;

&lt;p&gt;Next post I’ll chat about what’s been up since ending this journey into coding. Spoiler alert: It has been a lot of networking, public speaking, and just getting my face out there!&lt;/p&gt;

&lt;p&gt;Until next time, friends.&lt;/p&gt;
</description>
				<pubDate>Sun, 04 Dec 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/12/04/week13.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/12/04/week13.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 13 in The Life of a Coding Bootcamper. Finale</title>
				<description>&lt;p&gt;Hey you! You made it. You made the journey with me to the last final week of class and the big Project 4 finale. It’s been a long road and now it’s almost time to say goodbye. This week, our instructors provided two elective classes, an Instructor AMA (Ask Me Anything, famous from Reddit) and Project 4 Presentations were due. On the very last day of class, we reflected with our classmates, pop champagne and discussed life after WDI with the Outcomes team. Let’s go!&lt;/p&gt;

&lt;h1 id=&quot;day-1-one-on-ones-and-independent-project-work&quot;&gt;Day 1: One on Ones and Independent Project Work&lt;/h1&gt;

&lt;p&gt;Today, we didn’t have anything else to do but work, work, work, work, work. An instructor was available to answer any questions from 1:30pm - 2:30pm, exactly one hour of the day. Otherwise, all questions were to be submitted as Github Issues on the general project repo.&lt;/p&gt;

&lt;h1 id=&quot;day-2-project-work-and-intro-to-react-native&quot;&gt;Day 2: Project Work and Intro to React Native&lt;/h1&gt;

&lt;p&gt;Again, an instructor was available for one hour of the day. All issues or questions were to be submitted through Github as an issue. Luckily, the instructors were very quick to respond to issues and provide help online. Also, as a class, we helped each other a lot through difficult bugs. It’s really impressive to see how far everyone has come in their journey of learning to programming. I was truly lucky to have such an amazing cohort, full of bright, helpful and eager individuals.&lt;/p&gt;

&lt;p&gt;Okay, enough of the sappy talk.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-react-native-25-hours&quot;&gt;Intro to React Native: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-native.png&quot; alt=&quot;React Native&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React Native is a framework for building cross-platform apps. React Native is like React, but it uses native components instead of web components as building blocks. This lesson only covered iOS development, that once learned, can be ported into creating an Android app very quickly.&lt;/p&gt;

&lt;p&gt;Unfortunately, I did not attend this elective. I didn’t think my brain could handle any more new information and I was too focused on my project to even get up and take a bathroom break. But I’ll share with you the learning objectives.&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives&quot;&gt;Learning Objectives:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the problem React Native solves and its approach to solving it&lt;/li&gt;
  &lt;li&gt;Build an iOS app with React Native&lt;/li&gt;
  &lt;li&gt;Utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TextInput&lt;/code&gt; components to construct native screens&lt;/li&gt;
  &lt;li&gt;Explain how to style components in a React Native application&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-3-project-work-and-custom-deployment&quot;&gt;Day 3: Project Work and Custom Deployment&lt;/h1&gt;

&lt;p&gt;All morning was all work and barely any play. In the afternoon, our official last class was available as an elective: Custom Deployment.&lt;/p&gt;

&lt;h2 id=&quot;custom-deployment-25-hours&quot;&gt;Custom Deployment: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Today, I was feeling good about the progress I’ve made in my project so I decided to give myself a break and learn about custom deployments! So far in class, we’ve deployed our apps using Heroku, Github Pages and Firebase. Today, we learned how to deploy our apps using Digital Ocean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161130_144513.jpg&quot; alt=&quot;Digital Ocean Picture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives-1&quot;&gt;Learning Objectives:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Create a Digital Ocean droplet&lt;/li&gt;
  &lt;li&gt;Log into a server via SSH&lt;/li&gt;
  &lt;li&gt;Install dependencies on a server&lt;/li&gt;
  &lt;li&gt;Install a webserver&lt;/li&gt;
  &lt;li&gt;Clone an application to a Virtual Private Server (VPS)&lt;/li&gt;
  &lt;li&gt;Set up a domain and proxy server&lt;/li&gt;
  &lt;li&gt;Configure a reverse proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you’re like me, you might be asking yourself, “Heroku worked just fine… why learn something new?”. With Heroku, deploying to Heroku requires a very specific configuration and customization is very limited.  With Digital Ocean, you have customization, you can install whatever dependencies you want - whether it’s gems, npm modules, etc. So, it’s worth getting an understanding for when we start building bigger apps, with more dependencies and need the flexibility.&lt;/p&gt;

&lt;p&gt;So as a class, we registered for a Digital Ocean account and walked through the learning objectives together.&lt;/p&gt;

&lt;p&gt;One notable thing, it was my first time actually using &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;. I’ve seen that word before but today I found out it’s a web server. Most popular for being fast with low memory usage and that it can act as a reverse proxy server. You can easily install it using the command line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ll know nginx is up and running if you see something like this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/nginx.png&quot; alt=&quot;nginx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool.&lt;/p&gt;

&lt;h1 id=&quot;day-4-instructors-ama&quot;&gt;Day 4: Instructors AMA&lt;/h1&gt;

&lt;p&gt;So it’s the last day before graduation and yes there’s still work to be done! However, there was no way I was missing an instructor AMA, aka, ASK ME ANYTHING! Made famous from Reddit, AMA is when famous people or someone with an interesting role or story opens up a forum and you can ask them anything. Literally, anything you want!&lt;/p&gt;

&lt;p&gt;This was a lot of fun because we really got to know our instructors more… questions ranged from “How hard is it to code in real life with real humans?” to “What do you think is the meaning of life?”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/AMA.JPG&quot; alt=&quot;Shot of AMA&quot; /&gt;&lt;/p&gt;
&lt;center&gt;How amazing is this shot? Looks like an album cover. Kudos to my classmate Mike Rubin for the pic!&lt;/center&gt;

&lt;h1 id=&quot;day-5-presentations-graduation-and-reflections&quot;&gt;Day 5: Presentations, Graduation and Reflections&lt;/h1&gt;

&lt;p&gt;It’s the BIG day, folks! Time to talk about the project.&lt;/p&gt;

&lt;h2 id=&quot;project-overview&quot;&gt;Project Overview&lt;/h2&gt;

&lt;p&gt;We’ve come a long way, and it’s time to show it. This will be the most advanced project to date, and if you put creativity into it, it’ll hopefully be the thing you want to show off most prominently in your portfolio.&lt;/p&gt;

&lt;p&gt;We get to call the shots and invent our own idea, choosing a framework &amp;amp; tools that are appropriate for what we want to build. Pull from everything we’ve learned so far, and tackle something that’ll push us a little outside of our comfort zone.&lt;/p&gt;

&lt;p&gt;Make sure to review the project proposal with an instructor so we can make sure it’s something that can be accomplish in the limited time we have, and make sure it’s something that’ll be impressive visually. Sometimes people do judge a book by its cover – or an app by its design.&lt;/p&gt;

&lt;h2 id=&quot;technical-suggestions&quot;&gt;Technical Suggestions&lt;/h2&gt;

&lt;h3 id=&quot;your-app-must&quot;&gt;Your app must:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Be a complete product, which most likely means multiple relationships and CRUD functionality for at least a couple models&lt;/li&gt;
  &lt;li&gt;Implement thoughtful user stories that are significant enough to help you know which features to build and which to scrap&lt;/li&gt;
  &lt;li&gt;Be deployed online so it’s publicly accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-did-i-do&quot;&gt;What Did I Do?&lt;/h2&gt;

&lt;h2 id=&quot;background-story&quot;&gt;Background Story&lt;/h2&gt;

&lt;p&gt;Going out on a budget is hard. After spending 14 weeks unemployed while attending General Assembly, going out is almost impossible without busting your budget for the week.&lt;/p&gt;

&lt;p&gt;Every night, my friends and I researched bars with the best drink specials. The number one question in mind… where are all of the drink specials? And &lt;strong&gt;$ip&lt;/strong&gt; was born.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$ip&lt;/strong&gt; will only show you bottomless drink specials that are under $15. In most cases, the drink special is FREE!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/$ip.png&quot; alt=&quot;$ip Screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of main page for $ip&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/collage-sip.jpg&quot; alt=&quot;$ip Collage&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Collage of screenshots&lt;/center&gt;

&lt;h2 id=&quot;technologies-used&quot;&gt;Technologies Used&lt;/h2&gt;

&lt;p&gt;$ip is a full CRUD, MEAN Application with a Google Maps API. It’s built with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AngualarJS&lt;/li&gt;
  &lt;li&gt;MongoDB&lt;/li&gt;
  &lt;li&gt;Mongoose&lt;/li&gt;
  &lt;li&gt;Express&lt;/li&gt;
  &lt;li&gt;Nodejs&lt;/li&gt;
  &lt;li&gt;Google Maps API for Plotting Data on the Map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created my own API that you can &lt;a href=&quot;https://sip-dc.herokuapp.com/api/drinks&quot;&gt;view/use here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;live-demo&quot;&gt;Live Demo&lt;/h2&gt;

&lt;p&gt;So you can check out my app, $ip, right now by visiting it’s &lt;a href=&quot;https://sip-dc.herokuapp.com/&quot;&gt;live demo link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If interested, you can check out &lt;a href=&quot;https://github.com/LWatsonlm/Sip&quot;&gt;my Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s how to run the app from Github:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mongod&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ nodemon index.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;upcoming-features&quot;&gt;Upcoming Features&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Remove the show view and corresponding show router and use modals instead, making it a true SPA.&lt;/li&gt;
  &lt;li&gt;When you click on a marker on the map, details appear regarding the location.&lt;/li&gt;
  &lt;li&gt;Adding Google Places API, so users can search inside the Google Map for locations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;presentations&quot;&gt;Presentations&lt;/h2&gt;

&lt;p&gt;We had presentations in the same style of project one… science fair style. Remember that? It’s when everyone stands up at their individual spots in the room and show off your project to anyone who walks to you. Definitely much more preferred than standing up in front of the room and presenting.&lt;/p&gt;

&lt;p&gt;One of the best feelings in the world is watching people light up when their interacting with something you built. I loved being able to be proud of my work and show off it’s beauty. It helps that it’s an app focusing on drinking deals because who doesn’t love a good deal on alcohol?!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/classmates.jpg&quot; alt=&quot;classmates viewing my app&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/classmates2.jpg&quot; alt=&quot;classmates viewing my app2&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Classmates interacting with $ip! Love it!&lt;/center&gt;

&lt;h1 id=&quot;day-5-graduation-and-reflections&quot;&gt;Day 5: Graduation and Reflections&lt;/h1&gt;

&lt;p&gt;After everyone had a chance to present their project, it was time to reflect on everything we’ve learned and how much we’ve grown.&lt;/p&gt;

&lt;p&gt;We were told to grab a piece of paper and a piece of tape and turn to the left and tape that paper on our neighbor’s back. Remember those days in grade school where you would wear a white shirt and let people write notes with markers on it? Or how our year books had blank pages towards the end so your friends could write messages saying “stay true”… “never change!” … this was that type of party.&lt;/p&gt;

&lt;p&gt;Since I actually like these people, today wasn’t as painful as middle school.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/reflections.jpg&quot; alt=&quot;reflecting&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/refelections2.jpg&quot; alt=&quot;reflecting&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/reflections3.jpg&quot; alt=&quot;reflecting&quot; /&gt;&lt;/p&gt;
&lt;center&gt;You write on my back, I'll write on yours!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here’s what I got back from … my back:
&lt;img src=&quot;/img/my-back.jpg&quot; alt=&quot;What my classmates think about me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, we popped champagne (no really! We had 6 bottles of champagne!) and cheers to our victory. Then we took a super awkward group picture haha.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bad-class-pic.JPG&quot; alt=&quot;Group Picture&quot; /&gt;&lt;/p&gt;
&lt;center&gt;lol&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And that was that. Another chapter closed in my life.&lt;/p&gt;

&lt;p&gt;Next post I’ll chat about what’s been up since ending this journey into coding. Spoiler alert: It has been a lot of networking, public speaking, and just getting my face out there!&lt;/p&gt;

&lt;p&gt;Until next time, friends.&lt;/p&gt;
</description>
				<pubDate>Sun, 04 Dec 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/12/04/week13.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/12/04/week13.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 12 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;It’s Thanksgiving week and we have Wednesday - Friday off to spend with families and friends! This week I started working on my project (which you’ll soon enough see!!) and our instructors gave us the option of learning electives. Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Thanksgiving.jpg&quot; alt=&quot;thanksgiving&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-1-project--html5-canvas&quot;&gt;Day 1: Project &amp;amp;&amp;amp; HTML5 Canvas&lt;/h1&gt;

&lt;h2 id=&quot;work-on-project-55-hours&quot;&gt;Work on Project 5.5 Hours&lt;/h2&gt;

&lt;p&gt;Need a reminder on what project 4 is all about? No worries.&lt;/p&gt;

&lt;p&gt;We get to call the shots and invent our own idea, choosing a framework &amp;amp; tools that are appropriate for whatever we want to build. Pulling from everything we’ve learned so far, and try to tackle something that will push us a little outside of our comfort zone.&lt;/p&gt;

&lt;h2 id=&quot;technical-suggestions&quot;&gt;Technical Suggestions&lt;/h2&gt;

&lt;p&gt;The app must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be a complete product,&lt;/strong&gt; which most likely means multiple relationships and CRUD functionality for at least a couple models&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement thoughtful user stories&lt;/strong&gt; that are significant enough to help you know which features to build and which to scrap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be deployed online&lt;/strong&gt; so it’s publicly accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;html5-canvas-elective-25-hours&quot;&gt;HTML5 Canvas: Elective 2.5 Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/html-canvas.png&quot; alt=&quot;html5 canvas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain what canvas is and why we use it&lt;/li&gt;
  &lt;li&gt;Draw graphics using a 2d context&lt;/li&gt;
  &lt;li&gt;Build a game using canvas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The HTML5 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; element is used to draw graphics, using JavaScript. It was designed by Apple in 2004.&lt;/p&gt;

&lt;p&gt;You can, and you should, check out the following canvas demos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://corehtml5canvas.com/code-live/ch01/example-1.8/example.html&quot;&gt;100 Bouncing Balls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codepen.io/dissimulate/pen/KrAwx&quot;&gt;Tearable Cloth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freeriderhd.com/t/1016-layers&quot;&gt;Free Rider HD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codepen.io/soulwire/pen/Ffvlo&quot;&gt;30,000 Particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty neat stuff, huh?&lt;/p&gt;

&lt;p&gt;We finished the day by working on a mini-lab (which was not mini at all), creating the old school game, Snake.&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes--d3&quot;&gt;Day 2: Outcomes &amp;amp;&amp;amp; D3&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Today was portfolio standup day. Each student had the chance to show off our portfolio and get feedback from other students.&lt;/p&gt;

&lt;p&gt;We weren’t expecting to have a perfect portfolio at this time, however, we needed to be able to discuss our work, our plans for completing any unfinished pieces, and our plans for after graduation.&lt;/p&gt;

&lt;h2 id=&quot;d3-elective-25-hours&quot;&gt;D3: Elective 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Unfortunately, I did not attend this elective because I was deep into working on my project. However, I’ll leave you with a quick intro into D3 and the learning objectives of today’s elective.&lt;/p&gt;

&lt;p&gt;What Is D3?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/d3.svg&quot; alt=&quot;D3&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;D3 stands for Data-Driven Documents. The word “document” in D3 refers to the DOM. Javascript can manipulate the DOM, creating and deleting pieces of it. Building data visualizations, however, with tools that are suited for GUI programming is difficult and verbose. Enter D3.&lt;/p&gt;

&lt;p&gt;Learning Objectives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Manipulate the DOM using D3&lt;/li&gt;
  &lt;li&gt;Bind data to DOM elements&lt;/li&gt;
  &lt;li&gt;Scale data to fit the viewport&lt;/li&gt;
  &lt;li&gt;Use D3 helper methods like min and max&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day-3---5-thanksgiving&quot;&gt;Day 3 - 5: Thanksgiving&lt;/h1&gt;

&lt;p&gt;General Assembly gave us the rest of the week off and did not expect us to work on our projects during this time. Which I was so grateful for! I was able to visit family and relax a bit for the first time since the program started.&lt;/p&gt;

&lt;p&gt;Next week is officially our last week of WDI. In next week’s post, I’ll share with my Project 4’s Github and Demo links.&lt;/p&gt;

&lt;p&gt;Until then!&lt;/p&gt;
</description>
				<pubDate>Sun, 27 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/27/week12.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/27/week12.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 11 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Okay, people! It’s Week 11 and it’s our last “real” week of class. This week, we’re learning about Facebook’s language: React.  It’s also the week we start our final capstone project, Project 4. But first, React.&lt;/p&gt;

&lt;h1 id=&quot;day-1-intro-to-react&quot;&gt;Day 1: Intro to React&lt;/h1&gt;

&lt;p&gt;React was first used by Facebook in 2011 and Instagram in 2012. It’s a library used to craft modern day UI and create views for the front-end in the web client and native applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-white.png&quot; alt=&quot;react&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives of React:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain what ReactJS is and where it fits in our applications’ stack.&lt;/li&gt;
  &lt;li&gt;Explain the component model of web development.&lt;/li&gt;
  &lt;li&gt;Create and render React components in the browser.&lt;/li&gt;
  &lt;li&gt;Pass in data to a React component via props.&lt;/li&gt;
  &lt;li&gt;Nest React components.&lt;/li&gt;
  &lt;li&gt;Modify the state of a React component through events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we start up our in-class application by running a couple of commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i -g create-react-app
$ create-react-app blog-app
$ cd blog-app
$ npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm run start&lt;/code&gt;, lets you view the React app at http://localhost:3000&lt;/p&gt;

&lt;p&gt;Another big component of React is the… Components. We took a look at different websites in class and broke down each site as a component. For example, that would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/component.png&quot; alt=&quot;component&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Example of how to break down components of a webpage&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another big component of React is it’s Virtual DOM. The Virtual DOM is a Javascript representation of the actual DOM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Because of that, React can keep track of changes in the actual DOM by comparing different instances of the Virtual DOM.&lt;/li&gt;
  &lt;li&gt;React then isolates the changes between old and new instances of the Virtual DOM and then only updates the actual DOM with the necessary changes.&lt;/li&gt;
  &lt;li&gt;By only making the “necessary changes,” as opposed to re-rendering an entire view altogether, we save up on processing power.&lt;/li&gt;
  &lt;li&gt;This is not unlike Git, with which you compare the difference – or &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; – between two commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/V-DOM.png&quot; alt=&quot;Virtual DOM&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Virtual DOM&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more about the Virtual DOM, &lt;a href=&quot;https://www.youtube.com/watch?v=-DX3vJiqxm4&quot;&gt;check this video out.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won’t go too much more into React, since this isn’t a React tutorial ;)&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes-and-react-continued&quot;&gt;Day 2: Outcomes and React Continued&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Today in Outcomes we had a couple of industry leaders come into the classroom to chat about the dreaded technical interview! This was to help calm our nerves and prepare to nail our interviews.&lt;/p&gt;

&lt;p&gt;We experienced first hand what it’s like to be in a technical interview setting and got tips on how to prepare. We practiced with each other and with industry leaders on general technical questions, what to do or say when you don’t know the answer and examples of interview scenarios. It was a great lesson and helped curve my expectations of what to expect during an interview. I definitely have some studying to do.&lt;/p&gt;

&lt;h2 id=&quot;react-practice-paradigms-and-principles-25-hours&quot;&gt;React: Practice, Paradigms, and Principles: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/React2.jpg&quot; alt=&quot;React&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differentiate between Object-Oriented Programming and Functional Programming paradigms&lt;/li&gt;
  &lt;li&gt;Explain how React incorporates principles of Functional Programming&lt;/li&gt;
  &lt;li&gt;Identify state in a React app&lt;/li&gt;
  &lt;li&gt;Define the role of Container components and when to use them&lt;/li&gt;
  &lt;li&gt;Use jQuery to make AJAX calls in a React app&lt;/li&gt;
  &lt;li&gt;Explain the ways to add styles to a React app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In today’s class we practiced building a React app that’s more complex than the intro’s simple blog example. When building an app like this, it’s important to keep certain development practices and paradigms in mind so that we can write maintainable code.&lt;/p&gt;

&lt;h2 id=&quot;first-components&quot;&gt;F.I.R.S.T. Components&lt;/h2&gt;

&lt;p&gt;A React component is built to expect an input and render a UI with it. More importantly, a (well-structured) component only receives data specific to its purpose.&lt;/p&gt;

&lt;p&gt;While this doesn’t sound too groundbreaking, it is very different from the OOP principles we’ve gotten used to. This is because React follows a more functional approach to programming. For React components under this approach, the same input will always produce the same output.&lt;/p&gt;

&lt;p&gt;There’s a lot of different ways to build an app, but for React, we talked about what a component should be: &lt;strong&gt;F.I.R.S.T.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focused&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should do one thing and do it well. One thing that’s hard to adjust to in React coming from an OOP background is packing too much information into a component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Independent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should increase cohesion and reduce coupling. Behavior in one component should not impact the behavior of another. In other words, components should not rely on one another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reusable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should be written in a way that reduces the duplication of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ideally, components should be short and condensed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because the same input will always produce the same output, components are easily unit testable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-example.png&quot; alt=&quot;React&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Simple React Component Example&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reacts-state&quot;&gt;React’s State&lt;/h2&gt;

&lt;p&gt;So, why did we learn these principles? Because in React, it’s very to lose control of our application’s state. When I say “state”, I mean the properties of a component that change as the application runs.&lt;/p&gt;

&lt;p&gt;Like for example, beginning a new game of Pokemon, what is the state of a new game? Well, you have 0 Pokemon and you’re still in Pallet Town. What is the state of Pokemon when you win the game? You have 8 badges and you’ve defeated the Elite Four. So, what’s the common theme here, when changes a state? An Event!&lt;/p&gt;

&lt;h2 id=&quot;in-class-lab&quot;&gt;In Class Lab&lt;/h2&gt;

&lt;p&gt;To learn more about React, we built a movie browser application, allowing users to enter a search term, and view results of movies via the OMDB API.&lt;/p&gt;

&lt;p&gt;If we got stuck, our instructors were around to help. At the end of the class, we were given the solution branch to check alternative ways on how to build this app.&lt;/p&gt;

&lt;h1 id=&quot;day-3-all-day-react-lab&quot;&gt;Day 3: All Day React Lab&lt;/h1&gt;

&lt;p&gt;Today’s objective is to apply the fundamentals of what we learned so far by building a Todo app in React.&lt;/p&gt;

&lt;p&gt;Why build a todo app?&lt;/p&gt;

&lt;p&gt;Because it is the prototypical CRUD app that will test your web development skills with a different technology in a familiar domain.&lt;/p&gt;

&lt;p&gt;I had a lot of trouble with this lab, but it definitely helped me understand all the things I needed to study up on. Ultimately, I used this &lt;a href=&quot;https://www.kirupa.com/react/simple_todo_app_react.htm&quot;&gt;very helpful Todo tutorial&lt;/a&gt; that helped walked through some concepts and techniques I was having trouble with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/finished_todo.png&quot; alt=&quot;Finished Todo App&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Finished Todo app from the tutorial&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-4--5-project-4-intro&quot;&gt;Day 4 &amp;amp;&amp;amp; 5: Project 4 Intro&lt;/h1&gt;

&lt;p&gt;THIS IS IT. We’ve come a long way, and it’s time to show it. Project 4 should be the most advanced project to date.&lt;/p&gt;

&lt;p&gt;We get to call the shots and invent our own idea, choosing a framework &amp;amp; tools that are appropriate for whatever we want to build. Pulling from everything we’ve learned so far, and try to tackle something that will push us a little outside of our comfort zone.&lt;/p&gt;

&lt;p&gt;We had to sure to review our project proposal with one of our instructors just to make sure it’s something we can accomplish in the limited time that we have.&lt;/p&gt;

&lt;h2 id=&quot;technical-suggestions&quot;&gt;Technical Suggestions&lt;/h2&gt;

&lt;p&gt;The app must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be a complete product,&lt;/strong&gt; which most likely means multiple relationships and CRUD functionality for at least a couple models&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement thoughtful user stories&lt;/strong&gt; that are significant enough to help you know which features to build and which to scrap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be deployed online&lt;/strong&gt; so it’s publicly accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I spent a good chuck of time deciding on a project idea, writing out pseudocode, creating ERDs and researched various APIs to pick the most suited technology for my project.&lt;/p&gt;

&lt;p&gt;Stay tuned to hear about my project idea. Head’s up - Next week is a short week - it’s Thanksgiving!&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 20 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/20/week11.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/20/week11.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 11 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Okay, people! It’s Week 11 and it’s our last “real” week of class. This week, we’re learning about Facebook’s language: React.  It’s also the week we start our final capstone project, Project 4. But first, React.&lt;/p&gt;

&lt;h1 id=&quot;day-1-intro-to-react&quot;&gt;Day 1: Intro to React&lt;/h1&gt;

&lt;p&gt;React was first used by Facebook in 2011 and Instagram in 2012. It’s a library used to craft modern day UI and create views for the front-end in the web client and native applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-white.png&quot; alt=&quot;react&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives of React:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain what ReactJS is and where it fits in our applications’ stack.&lt;/li&gt;
  &lt;li&gt;Explain the component model of web development.&lt;/li&gt;
  &lt;li&gt;Create and render React components in the browser.&lt;/li&gt;
  &lt;li&gt;Pass in data to a React component via props.&lt;/li&gt;
  &lt;li&gt;Nest React components.&lt;/li&gt;
  &lt;li&gt;Modify the state of a React component through events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we start up our in-class application by running a couple of commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i -g create-react-app
$ create-react-app blog-app
$ cd blog-app
$ npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm run start&lt;/code&gt;, lets you view the React app at http://localhost:3000&lt;/p&gt;

&lt;p&gt;Another big component of React is the… Components. We took a look at different websites in class and broke down each site as a component. For example, that would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/component.png&quot; alt=&quot;component&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Example of how to break down components of a webpage&lt;/center&gt;

&lt;p&gt;Another big component of React is it’s Virtual DOM. The Virtual DOM is a Javascript representation of the actual DOM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Because of that, React can keep track of changes in the actual DOM by comparing different instances of the Virtual DOM.&lt;/li&gt;
  &lt;li&gt;React then isolates the changes between old and new instances of the Virtual DOM and then only updates the actual DOM with the necessary changes.&lt;/li&gt;
  &lt;li&gt;By only making the “necessary changes,” as opposed to re-rendering an entire view altogether, we save up on processing power.&lt;/li&gt;
  &lt;li&gt;This is not unlike Git, with which you compare the difference – or &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; – between two commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/V-DOM.png&quot; alt=&quot;Virtual DOM&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Virtual DOM&lt;/center&gt;

&lt;p&gt;If you’re interested in learning more about the Virtual DOM, &lt;a href=&quot;https://www.youtube.com/watch?v=-DX3vJiqxm4&quot;&gt;check this video out.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won’t go too much more into React, since this isn’t a React tutorial ;)&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes-and-react-continued&quot;&gt;Day 2: Outcomes and React Continued&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Today in Outcomes we had a couple of industry leaders come into the classroom to chat about the dreaded technical interview! This was to help calm our nerves and prepare to nail our interviews.&lt;/p&gt;

&lt;p&gt;We experienced first hand what it’s like to be in a technical interview setting and got tips on how to prepare. We practiced with each other and with industry leaders on general technical questions, what to do or say when you don’t know the answer and examples of interview scenarios. It was a great lesson and helped curve my expectations of what to expect during an interview. I definitely have some studying to do.&lt;/p&gt;

&lt;h2 id=&quot;react-practice-paradigms-and-principles-25-hours&quot;&gt;React: Practice, Paradigms, and Principles: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/React2.png&quot; alt=&quot;React&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differentiate between Object-Oriented Programming and Functional Programming paradigms&lt;/li&gt;
  &lt;li&gt;Explain how React incorporates principles of Functional Programming&lt;/li&gt;
  &lt;li&gt;Identify state in a React app&lt;/li&gt;
  &lt;li&gt;Define the role of Container components and when to use them&lt;/li&gt;
  &lt;li&gt;Use jQuery to make AJAX calls in a React app&lt;/li&gt;
  &lt;li&gt;Explain the ways to add styles to a React app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In today’s class we practiced building a React app that’s more complex than the intro’s simple blog example. When building an app like this, it’s important to keep certain development practices and paradigms in mind so that we can write maintainable code.&lt;/p&gt;

&lt;h2 id=&quot;first-components&quot;&gt;F.I.R.S.T. Components&lt;/h2&gt;

&lt;p&gt;A React component is built to expect an input and render a UI with it. More importantly, a (well-structured) component only receives data specific to its purpose.&lt;/p&gt;

&lt;p&gt;While this doesn’t sound too groundbreaking, it is very different from the OOP principles we’ve gotten used to. This is because React follows a more functional approach to programming. For React components under this approach, the same input will always produce the same output.&lt;/p&gt;

&lt;p&gt;There’s a lot of different ways to build an app, but for React, we talked about what a component should be: &lt;strong&gt;F.I.R.S.T.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focused&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should do one thing and do it well. One thing that’s hard to adjust to in React coming from an OOP background is packing too much information into a component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Independent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should increase cohesion and reduce coupling. Behavior in one component should not impact the behavior of another. In other words, components should not rely on one another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reusable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should be written in a way that reduces the duplication of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ideally, components should be short and condensed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because the same input will always produce the same output, components are easily unit testable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-example.png&quot; alt=&quot;React&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Simple React Component Example&lt;/center&gt;

&lt;h2 id=&quot;reacts-state&quot;&gt;React’s State&lt;/h2&gt;

&lt;p&gt;So, why did we learn these principles? Because in React, it’s very to lose control of our application’s state. When I say “state”, I mean the properties of a component that change as the application runs.&lt;/p&gt;

&lt;p&gt;Like for example, beginning a new game of Pokemon, what is the state of a new game? Well, you have 0 Pokemon and you’re still in Pallet Town. What is the state of Pokemon when you win the game? You have 8 badges and you’ve defeated the Elite Four. So, what’s the common theme here, when changes a state? An Event!&lt;/p&gt;

&lt;h2 id=&quot;in-class-lab&quot;&gt;In Class Lab&lt;/h2&gt;

&lt;p&gt;To learn more about React, we built a movie browser application, allowing users to enter a search term, and view results of movies via the OMDB API.&lt;/p&gt;

&lt;p&gt;If we got stuck, our instructors were around to help. At the end of the class, we were given the solution branch to check alternative ways on how to build this app.&lt;/p&gt;

&lt;h1 id=&quot;day-3-all-day-react-lab&quot;&gt;Day 3: All Day React Lab&lt;/h1&gt;

&lt;p&gt;Today’s objective is to apply the fundamentals of what we learned so far by building a Todo app in React.&lt;/p&gt;

&lt;p&gt;Why build a todo app?&lt;/p&gt;

&lt;p&gt;Because it is the prototypical CRUD app that will test your web development skills with a different technology in a familiar domain.&lt;/p&gt;

&lt;p&gt;I had a lot of trouble with this lab, but it definitely helped me understand all the things I needed to study up on. Ultimately, I used this &lt;a href=&quot;https://www.kirupa.com/react/simple_todo_app_react.htm&quot;&gt;very helpful Todo tutorial&lt;/a&gt; that helped walked through some concepts and techniques I was having trouble with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/finished_todo.png&quot; alt=&quot;Finished Todo App&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Finished Todo app from the tutorial&lt;/center&gt;

&lt;h1 id=&quot;day-4--5-project-4-intro&quot;&gt;Day 4 &amp;amp;&amp;amp; 5: Project 4 Intro&lt;/h1&gt;

&lt;p&gt;THIS IS IT. We’ve come a long way, and it’s time to show it. Project 4 should be the most advanced project to date.&lt;/p&gt;

&lt;p&gt;We get to call the shots and invent our own idea, choosing a framework &amp;amp; tools that are appropriate for whatever we want to build. Pulling from everything we’ve learned so far, and try to tackle something that will push us a little outside of our comfort zone.&lt;/p&gt;

&lt;p&gt;We had to sure to review our project proposal with one of our instructors just to make sure it’s something we can accomplish in the limited time that we have.&lt;/p&gt;

&lt;h2 id=&quot;technical-suggestions&quot;&gt;Technical Suggestions&lt;/h2&gt;

&lt;p&gt;The app must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be a complete product,&lt;/strong&gt; which most likely means multiple relationships and CRUD functionality for at least a couple models&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement thoughtful user stories&lt;/strong&gt; that are significant enough to help you know which features to build and which to scrap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be deployed online&lt;/strong&gt; so it’s publicly accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I spent a good chuck of time deciding on a project idea, writing out pseudocode, creating ERDs and researched various APIs to pick the most suited technology for my project.&lt;/p&gt;

&lt;p&gt;Stay tuned to hear about my project idea. Head’s up - Next week is a short week - it’s Thanksgiving!&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 20 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/20/week11.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/20/week11.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 10 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Welcome back to week 10 out of 13. We’re almost there, folks. Thanks for sticking with me. As you could imagine, I am exhausted. Maybe you feel exhausted from just READING about the bootcamp? However, we’re in the last stretch and there’s no time to slow down now. This week is mostly composed of Labs, Voting due to it being Election Week, and a lot of tears and hugs. What doesn’t kill you, only makes you stronger!! So here we go!”&lt;/p&gt;

&lt;h1 id=&quot;day-1-express--mongoose-25-hours&quot;&gt;Day 1: Express &amp;amp;&amp;amp; Mongoose: 2.5 Hours&lt;/h1&gt;

&lt;p&gt;So far we’ve learned about a number of tools: Node, Express, MongoDB and Mongoose. Developers use these tools to build server-side Javascript applications. We learn how to work each tool individually but we have not used them all together. So that’s what today is about. In today’s lesson, we will learn how to connect everything and create an app that can receive HTTP requests, retrieve data, make changes to a database and send information back to the end-user.&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives-for-express-and-mongoose&quot;&gt;Learning Objectives for Express and Mongoose&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Identify how an Express app fits within the MVC framework.&lt;/li&gt;
  &lt;li&gt;Connect an Express app to a MongoDB database.&lt;/li&gt;
  &lt;li&gt;Implement CRUD functionality in an Express app using Mongoose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We started with a brand new application, called &lt;em&gt;When President&lt;/em&gt; (which happened to be very timely because it was election week). “When President” is a simple one page, CRUD application with hard coded dummy data. It was our job to take this application and implement Express and Mongoose.&lt;/p&gt;

&lt;p&gt;Since Rails was fresh in our minds, as a class, we created a Rails-to-Express transition guide. For instance, in Rails, we used PostgresSQL as our database. For Express, we’re going to use a MongoDB database.&lt;/p&gt;

&lt;p&gt;We also compared Mongoose to ActiveRecord for Rails. Mongoose is an ODM (Object Data Mapping) that we’re using to represent data from a Mongo database as models in a Javascript back-end.&lt;/p&gt;

&lt;p&gt;Via the command line, we installed Mongoose, created our &lt;code class=&quot;highlighter-rouge&quot;&gt;connection.js&lt;/code&gt; file, defined a schema using mongoose’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.Schema()&lt;/code&gt; method, defined a model using &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.model()&lt;/code&gt; and lastly connected to our database using &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.connect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mongoose.png&quot; alt=&quot;Mongoose&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Mongoose&lt;/center&gt;

&lt;p&gt;In those few steps, we were able to have a real connection to our Express application! Next, we seeded our database using Mongoose.&lt;/p&gt;

&lt;p&gt;After a short break, we got back into our application and created forms using &lt;code class=&quot;highlighter-rouge&quot;&gt;body-parser&lt;/code&gt;. Body-parser is a parsing middleware that let’s us handle form submissions.&lt;/p&gt;

&lt;p&gt;I won’t go into the rest of the lesson’s play by play. But for a Monday morning, we were definitely feeling the burn of knowledge. The heat is on!&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-3-hours&quot;&gt;Afternoon Lab: 3 Hours&lt;/h2&gt;

&lt;p&gt;In the afternoon, we had a lab assigned to us so we could apply what we’ve learned to a real life project. The lab was called &lt;em&gt;MEN Lab: URL Shortner&lt;/em&gt; … MEN as in Mongoose, Express and Node.&lt;/p&gt;

&lt;p&gt;The lab was due at 5pm and an instructor was available for office hours between 6pm-8pm. I stayed behind to really solidify today’s lesson and get a head start on the homework due on Thursday.&lt;/p&gt;

&lt;h1 id=&quot;day-2-election-day&quot;&gt;Day 2: Election Day!&lt;/h1&gt;

&lt;p&gt;To everyone’s surprise and enthusiasm, our cohort was given the day off so everyone had the chance to vote in the Presidential Election of 2016.&lt;/p&gt;

&lt;p&gt;So I took the morning to head out to the polls, sit in a 2.5-hour line, cast my vote and headed back to General Assembly to continue my homework assignments.&lt;/p&gt;

&lt;h1 id=&quot;day-3-checkpoint--mean-lab&quot;&gt;Day 3: Checkpoint &amp;amp;&amp;amp; MEAN Lab&lt;/h1&gt;

&lt;p&gt;It’s the day after elections. Okay, I won’t lie. Today was the most depressing day ever. Today was the hardest day for me because not only am I’m feeling overwhelmed with work but I’m mentally, physically, emotionally drained from the slap in my face that our Country did last night. That is all I will say about that.&lt;/p&gt;

&lt;h2 id=&quot;checkpoint-1-hour&quot;&gt;Checkpoint: 1 Hour&lt;/h2&gt;

&lt;p&gt;Checkpoints can be thought of a quiz you take to check where you are at in the material. This quiz is a timed assignment involving questions, coding exercising, and short answers. It’s open book, open notebook, but you may not speak to other students.&lt;/p&gt;

&lt;h2 id=&quot;mean-lab-the-rest-of-the-day&quot;&gt;MEAN Lab: The Rest of The Day&lt;/h2&gt;

&lt;p&gt;Another lab! Yes, please! As you know, labs are definitely my favorite time in all of the bootcamp. It’s time to play around, mess up things, break my application, cry, find that I missed a semicolon somewhere, do a dance, and reflect on all that I’ve learned.&lt;/p&gt;

&lt;p&gt;Today’s lab was an open-ended pair lab. It was up to the pair to come up with a project idea. However, it must fulfill the following technical requirements…&lt;/p&gt;

&lt;h2 id=&quot;technical-requirements&quot;&gt;Technical Requirements&lt;/h2&gt;

&lt;p&gt;Your application should be ME(A)N. This includes…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;strong&gt;Express&lt;/strong&gt; to handle HTTP requests and serve API endpoints.&lt;/li&gt;
  &lt;li&gt;Using &lt;strong&gt;MongoDB&lt;/strong&gt; as the database.&lt;/li&gt;
  &lt;li&gt;Using &lt;strong&gt;Mongoose&lt;/strong&gt; as the ODM.&lt;/li&gt;
  &lt;li&gt;Adding &lt;strong&gt;Angular&lt;/strong&gt; as your front-end. Express should only handle your root view as well as your API routes. Angular should take care of the rest via &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Your app should have CRUD functionality for at least one model.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Me and my partner, Tim, teamed up and quickly found a project idea. We both share the obsession of POKEMON! So we found an awesome &lt;a href=&quot;http://pokeapi.co/about/&quot;&gt;Pokemon API&lt;/a&gt; and create our own lightweight, fast, Pokedex… or should I say &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX&quot;&gt;RAPIDEX!!!!&lt;/a&gt;. &lt;strong&gt;Hint:&lt;/strong&gt; Click on that link to view our Github of the project.&lt;/p&gt;

&lt;p&gt;For our project, we did a lot of &lt;strong&gt;pair programming.&lt;/strong&gt; Pair programming is an agile software development technique in which two programmers work together on one computer. One, the driver, writes code while the other, the observer or navigator, reviews each line of code as it is typed in. The observer also helps with Googling any questions that arise.&lt;/p&gt;

&lt;p&gt;Tim was an excellent partner, who geeked out over Pokemon and programming with me. I’d work again with him anytime! #Poke4Lyfe&lt;/p&gt;

&lt;h1 id=&quot;day-4-websockets&quot;&gt;Day 4: WebSockets!&lt;/h1&gt;

&lt;p&gt;HTTP wasn’t designed for real-time, two-way communication. Meaning, it wasn’t designed for real-time data fetching, such as, let’s say you want to see your stocks update in real-time on the screen. What technology would you use? AJAX uses HTTP, where you “pull” information from a server (you make a request and you get something back). So that wouldn’t work for real-time data updating… Enter, WebSockets!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/websockets.png&quot; alt=&quot;web-sockets&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Tweet from yours truly&lt;/center&gt;

&lt;p&gt;What is WebSockets? The official definition is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebSockets provides a standardized way for the server to send content to the browser without being solicited by the client and allowing for messages to be passed back and forth while keeping the connection open. In this way, a two-way (bi-directional) ongoing conversation can take place between a browser and the server.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By utilizing WebSockets, a client can open up a connection to a server that allows for the easy two-way transfer of data. This makes it great for real-time, event-driven web applications.&lt;/p&gt;

&lt;p&gt;Twitch and Slack are a couple of the notable web apps out there that are powered by WebSockets.&lt;/p&gt;

&lt;p&gt;Mozilla created a very cool game called &lt;img src=&quot;http://browserquest.mozilla.org/&quot; alt=&quot;BrowserQuest&quot; /&gt; using HTML canvas and WebSockets. Then in class, something awesome happened. We were instructed to play the game for the next 10 minutes! It wasn’t all fun and games while playing, we were asked to consider the following questions…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What pieces of information are being relayed between the client and server?&lt;/li&gt;
  &lt;li&gt;How often is information sent from the client to server or vice-versa?&lt;/li&gt;
  &lt;li&gt;What are some problems the developers who created this game might have had to consider when building it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/browserquest.png&quot; alt=&quot;browser&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Browser Quest! Game made in WebSockets&lt;/center&gt;

&lt;p&gt;We spent the rest of the day doing an in class lab, using the &lt;img src=&quot;http://socket.io/get-started/chat/&quot; alt=&quot;Socket.io chat application&quot; /&gt; tutorial. Very easy to follow guide for anyone curious about building a quick chat application! 2&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-25-hours&quot;&gt;Afternoon Lab: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;After lunch, we did another lab… I think the 4th lab this week? Today’s lab focused on Websockets, of course. We were to team up with a partner and create a simple game for two (or more) players. I teamed up with my partner from Project 3, Liza, and we set out to create a Tic Tac Toe game using Websockets! Fun times!&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips--all-day-lab&quot;&gt;Day 5: Slips &amp;amp;&amp;amp; All Day Lab&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;
&lt;p&gt;In the morning time, we did our usual stand up in front of the class and answer technical questions regarding the topics learned so far in class.&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-5-hours&quot;&gt;Afternoon Lab: 5 Hours&lt;/h2&gt;

&lt;p&gt;Today is was an all-day structured exercise in developing the skill most likely used in the industry: teaching yourself something new.&lt;/p&gt;

&lt;p&gt;We had to pick a useful library or technology stack of something we have not learned in class and build something! We could work alone or with partners.&lt;/p&gt;

&lt;p&gt;Tim (remember him?) and I decided to team back up together and keep working on our &lt;img src=&quot;https://github.com/LWatsonlm/RAPIDEX&quot; alt=&quot;RAPIDEX!!!!&quot; /&gt; app! And we decided to spend the day learning &lt;img src=&quot;https://vuejs.org/&quot; alt=&quot;Vue.js&quot; /&gt;, The Progressive JavaScript Framework for building user interfaces.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/vue.js.png&quot; alt=&quot;vue.js&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Vue.js, The Progressive JavaScript Framework&lt;center&gt;

We decided to use our existing Github repo and work off a new branch called ```vuejs```.

If interested, check out our ![Vue.js Github repo!](https://github.com/LWatsonlm/RAPIDEX/tree/vuejs).

## Presentations

Each group had 10 minutes to present what they learned and demo their application.

Some questions that we answered during our presentation:

* Why does this technology exist / what problem does it solve?
* Who built it / who maintains it?
* How does this technology compare to anything we have learned in class so far?
* Where did you go to learn this technology / what are some good resources out there?
* What kind of apps are best suited for this technology?
* What application did you build?
* What do you most like about this technology / what do most not like about it?

Spending the day learning a new language, reading through the documentation and coming to that ah-ha moment, really solidify the fact learning how to code is a lifelong commitment. Technology is always involving and it's important that we learn how to keep learning. Today was an excellent day and the assignment really challenged me.

Alright, that wraps up another week! Thanks for reading! Until next time!
&lt;/center&gt;&lt;/center&gt;
</description>
				<pubDate>Sun, 20 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/20/week10.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/20/week10.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 10 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Welcome back to week 10 out of 13. We’re almost there, folks. Thanks for sticking with me. As you could imagine, I am exhausted. Maybe you feel exhausted from just READING about the bootcamp? However, we’re in the last stretch and there’s no time to slow down now. This week is mostly composed of Labs, Voting due to it being Election Week, and a lot of tears and hugs. What doesn’t kill you, only makes you stronger!! So here we go!”&lt;/p&gt;

&lt;h1 id=&quot;day-1-express--mongoose-25-hours&quot;&gt;Day 1: Express &amp;amp;&amp;amp; Mongoose: 2.5 Hours&lt;/h1&gt;

&lt;p&gt;So far we’ve learned about a number of tools: Node, Express, MongoDB and Mongoose. Developers use these tools to build server-side Javascript applications. We learn how to work each tool individually but we have not used them all together. So that’s what today is about. In today’s lesson, we will learn how to connect everything and create an app that can receive HTTP requests, retrieve data, make changes to a database and send information back to the end-user.&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives-for-express-and-mongoose&quot;&gt;Learning Objectives for Express and Mongoose&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Identify how an Express app fits within the MVC framework.&lt;/li&gt;
  &lt;li&gt;Connect an Express app to a MongoDB database.&lt;/li&gt;
  &lt;li&gt;Implement CRUD functionality in an Express app using Mongoose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We started with a brand new application, called &lt;em&gt;When President&lt;/em&gt; (which happened to be very timely because it was election week). “When President” is a simple one page, CRUD application with hard coded dummy data. It was our job to take this application and implement Express and Mongoose.&lt;/p&gt;

&lt;p&gt;Since Rails was fresh in our minds, as a class, we created a Rails-to-Express transition guide. For instance, in Rails, we used PostgresSQL as our database. For Express, we’re going to use a MongoDB database.&lt;/p&gt;

&lt;p&gt;We also compared Mongoose to ActiveRecord for Rails. Mongoose is an ODM (Object Data Mapping) that we’re using to represent data from a Mongo database as models in a Javascript back-end.&lt;/p&gt;

&lt;p&gt;Via the command line, we installed Mongoose, created our &lt;code class=&quot;highlighter-rouge&quot;&gt;connection.js&lt;/code&gt; file, defined a schema using mongoose’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.Schema()&lt;/code&gt; method, defined a model using &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.model()&lt;/code&gt; and lastly connected to our database using &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.connect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mongoose.png&quot; alt=&quot;Mongoose&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Mongoose&lt;/center&gt;

&lt;p&gt;In those few steps, we were able to have a real connection to our Express application! Next, we seeded our database using Mongoose.&lt;/p&gt;

&lt;p&gt;After a short break, we got back into our application and created forms using &lt;code class=&quot;highlighter-rouge&quot;&gt;body-parser&lt;/code&gt;. Body-parser is a parsing middleware that let’s us handle form submissions.&lt;/p&gt;

&lt;p&gt;I won’t go into the rest of the lesson’s play by play. But for a Monday morning, we were definitely feeling the burn of knowledge. The heat is on!&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-3-hours&quot;&gt;Afternoon Lab: 3 Hours&lt;/h2&gt;

&lt;p&gt;In the afternoon, we had a lab assigned to us so we could apply what we’ve learned to a real life project. The lab was called &lt;em&gt;MEN Lab: URL Shortner&lt;/em&gt; … MEN as in Mongoose, Express and Node.&lt;/p&gt;

&lt;p&gt;The lab was due at 5pm and an instructor was available for office hours between 6pm-8pm. I stayed behind to really solidify today’s lesson and get a head start on the homework due on Thursday.&lt;/p&gt;

&lt;h1 id=&quot;day-2-election-day&quot;&gt;Day 2: Election Day!&lt;/h1&gt;

&lt;p&gt;To everyone’s surprise and enthusiasm, our cohort was given the day off so everyone had the chance to vote in the Presidential Election of 2016.&lt;/p&gt;

&lt;p&gt;So I took the morning to head out to the polls, sit in a 2.5-hour line, cast my vote and headed back to General Assembly to continue my homework assignments.&lt;/p&gt;

&lt;h1 id=&quot;day-3-checkpoint--mean-lab&quot;&gt;Day 3: Checkpoint &amp;amp;&amp;amp; MEAN Lab&lt;/h1&gt;

&lt;p&gt;It’s the day after elections. Okay, I won’t lie. Today was the most depressing day ever. Today was the hardest day for me because not only am I’m feeling overwhelmed with work but I’m mentally, physically, emotionally drained from the slap in my face that our Country did last night. That is all I will say about that.&lt;/p&gt;

&lt;h2 id=&quot;checkpoint-1-hour&quot;&gt;Checkpoint: 1 Hour&lt;/h2&gt;

&lt;p&gt;Checkpoints can be thought of a quiz you take to check where you are at in the material. This quiz is a timed assignment involving questions, coding exercising, and short answers. It’s open book, open notebook, but you may not speak to other students.&lt;/p&gt;

&lt;h2 id=&quot;mean-lab-the-rest-of-the-day&quot;&gt;MEAN Lab: The Rest of The Day&lt;/h2&gt;

&lt;p&gt;Another lab! Yes, please! As you know, labs are definitely my favorite time in all of the bootcamp. It’s time to play around, mess up things, break my application, cry, find that I missed a semicolon somewhere, do a dance, and reflect on all that I’ve learned.&lt;/p&gt;

&lt;p&gt;Today’s lab was an open-ended pair lab. It was up to the pair to come up with a project idea. However, it must fulfill the following technical requirements…&lt;/p&gt;

&lt;h2 id=&quot;technical-requirements&quot;&gt;Technical Requirements&lt;/h2&gt;

&lt;p&gt;Your application should be ME(A)N. This includes…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;strong&gt;Express&lt;/strong&gt; to handle HTTP requests and serve API endpoints.&lt;/li&gt;
  &lt;li&gt;Using &lt;strong&gt;MongoDB&lt;/strong&gt; as the database.&lt;/li&gt;
  &lt;li&gt;Using &lt;strong&gt;Mongoose&lt;/strong&gt; as the ODM.&lt;/li&gt;
  &lt;li&gt;Adding &lt;strong&gt;Angular&lt;/strong&gt; as your front-end. Express should only handle your root view as well as your API routes. Angular should take care of the rest via &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Your app should have CRUD functionality for at least one model.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Me and my partner, Tim, teamed up and quickly found a project idea. We both share the obsession of POKEMON! So we found an awesome &lt;a href=&quot;http://pokeapi.co/about/&quot;&gt;Pokemon API&lt;/a&gt; and create our own lightweight, fast, Pokedex… or should I say &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX&quot;&gt;RAPIDEX!!!!&lt;/a&gt;. &lt;strong&gt;Hint:&lt;/strong&gt; Click on that link to view our Github of the project.&lt;/p&gt;

&lt;p&gt;For our project, we did a lot of &lt;strong&gt;pair programming.&lt;/strong&gt; Pair programming is an agile software development technique in which two programmers work together on one computer. One, the driver, writes code while the other, the observer or navigator, reviews each line of code as it is typed in. The observer also helps with Googling any questions that arise.&lt;/p&gt;

&lt;p&gt;Tim was an excellent partner, who geeked out over Pokemon and programming with me. I’d work again with him anytime! #Poke4Lyfe&lt;/p&gt;

&lt;h1 id=&quot;day-4-websockets&quot;&gt;Day 4: WebSockets!&lt;/h1&gt;

&lt;p&gt;HTTP wasn’t designed for real-time, two-way communication. Meaning, it wasn’t designed for real-time data fetching, such as, let’s say you want to see your stocks update in real-time on the screen. What technology would you use? AJAX uses HTTP, where you “pull” information from a server (you make a request and you get something back). So that wouldn’t work for real-time data updating… Enter, WebSockets!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/websockets.png&quot; alt=&quot;web-sockets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is WebSockets? The official definition is:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WebSockets provides a standardized way for the server to send content to the browser without being solicited by the client and allowing for messages to be passed back and forth while keeping the connection open. In this way, a two-way (bi-directional) ongoing conversation can take place between a browser and the server.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By utilizing WebSockets, a client can open up a connection to a server that allows for the easy two-way transfer of data. This makes it great for real-time, event-driven web applications.&lt;/p&gt;

&lt;p&gt;Twitch and Slack are a couple of the notable web apps out there that are powered by WebSockets.&lt;/p&gt;

&lt;p&gt;Mozilla created a very cool game called &lt;a href=&quot;http://browserquest.mozilla.org/&quot;&gt;BrowserQuest&lt;/a&gt; using HTML canvas and WebSockets. Then in class, something awesome happened. We were instructed to play the game for the next 10 minutes! It wasn’t all fun and games while playing, we were asked to consider the following questions…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What pieces of information are being relayed between the client and server?&lt;/li&gt;
  &lt;li&gt;How often is information sent from the client to server or vice-versa?&lt;/li&gt;
  &lt;li&gt;What are some problems the developers who created this game might have had to consider when building it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/browserquest.png&quot; alt=&quot;browser&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Browser Quest! Game made in WebSockets&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We spent the rest of the day doing an in class lab, using the &lt;a href=&quot;http://socket.io/get-started/chat/&quot;&gt;Socket.io chat application&lt;/a&gt; tutorial. Very easy to follow guide for anyone curious about building a quick chat application! 2&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-25-hours&quot;&gt;Afternoon Lab: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;After lunch, we did another lab… I think the 4th lab this week? Today’s lab focused on Websockets, of course. We were to team up with a partner and create a simple game for two (or more) players. I teamed up with my partner from Project 3, Liza, and we set out to create a Tic Tac Toe game using Websockets! Fun times!&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips--all-day-lab&quot;&gt;Day 5: Slips &amp;amp;&amp;amp; All Day Lab&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;
&lt;p&gt;In the morning time, we did our usual stand up in front of the class and answer technical questions regarding the topics learned so far in class.&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-5-hours&quot;&gt;Afternoon Lab: 5 Hours&lt;/h2&gt;

&lt;p&gt;Today is was an all-day structured exercise in developing the skill most likely used in the industry: teaching yourself something new.&lt;/p&gt;

&lt;p&gt;We had to pick a useful library or technology stack of something we have not learned in class and build something! We could work alone or with partners.&lt;/p&gt;

&lt;p&gt;Tim (remember him?) and I decided to team back up together and keep working on our &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX&quot;&gt;RAPIDEX!!!!&lt;/a&gt; app! And we decided to spend the day learning &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt;, The Progressive JavaScript Framework for building user interfaces.&lt;/p&gt;

&lt;p&gt;We decided to use our existing Github repo and work off a new branch called &lt;strong&gt;vuejs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/vue.js.png&quot; alt=&quot;vue.js&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Vue.js, The Progressive JavaScript Framework&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If interested, please view our &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX/tree/vuejs&quot;&gt;Vue.js Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;presentations&quot;&gt;Presentations&lt;/h2&gt;

&lt;p&gt;Each group had 10 minutes to present what they learned and demo their application.&lt;/p&gt;

&lt;p&gt;Some questions we answered during our presentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why does this technology exist / what problem does it solve?&lt;/li&gt;
  &lt;li&gt;Who built it / who maintains it?&lt;/li&gt;
  &lt;li&gt;How does this technology compare to anything we have learned in class so far?&lt;/li&gt;
  &lt;li&gt;Where did you go to learn this technology / what are some good resources out there?&lt;/li&gt;
  &lt;li&gt;What kind of apps are best suited for this technology?&lt;/li&gt;
  &lt;li&gt;What application did you build?&lt;/li&gt;
  &lt;li&gt;What do you most like about this technology / what do most not like about it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spending the day learning a new language, reading through the documentation and coming to that ah-ha moment, really solidify the fact learning how to code is a lifelong commitment. Technology is always involving and it’s important that we learn how to keep learning. Today was an excellent day and the assignment really challenged me.&lt;/p&gt;

&lt;p&gt;Alright, that wraps up another week! Thanks for reading! Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 13 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/13/week10.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/13/week10.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 9 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Hey, hey, hey! This week was Project 3 week. On Friday morning, we found out who was in our group and some people weren’t too happy about their group assignments. Luckily, I was put into a group with two awesome classmates and we spent the entire morning setting group norms, figuring out our roles and responsibilities, and brainstorming ideas for our project!&lt;/p&gt;

&lt;h1 id=&quot;the-project-requirements&quot;&gt;The Project Requirements&lt;/h1&gt;

&lt;p&gt;Our instructors partnered us up for this project. This was meant to push us both technically and collaboratively. As developers, we will, almost certainly, be joining a development team during our careers. So, it’s important to learn how to work together.&lt;/p&gt;

&lt;p&gt;We must work together to architect, design, and build an app with two major components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An API of your own design, built using Rails, which serves JSON.&lt;/li&gt;
  &lt;li&gt;Front-end Angular code that updates the UI, and makes requests to the API using AJAX.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;our-first-team-meeting&quot;&gt;Our First Team Meeting&lt;/h1&gt;

&lt;p&gt;We spent a lot of time discussing and debating on the project topic. All three of us had very strong opinions on what type of project we should do. For instance, I wanted to create an application focusing on Google Maps API that stored prices on different items around the D.C. area. Other ideas included using an API from IBM that could do voice recognition (a bit much for a 4-day project!) and a networking application using Linkedin API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/project-brainstorm.jpg&quot; alt=&quot;Brainstorming&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A whiteboard of our brainstorming&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After creating ERDs, user stories and sketches of our top three projects, we finally decided to build a check-in application for networking events using LinkedIn’s API for user oAuth. We couldn’t decide on a name for it, so we did what any other project team would do and gave it a code name: &lt;strong&gt;Tatiana.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_120352.jpg&quot; alt=&quot;Teammates&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/IMG_20161028_120339.jpg&quot; alt=&quot;Teammates&quot; /&gt;&lt;/p&gt;
&lt;center&gt;My group and me planning out Tatiana&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Alright! So we have our project idea. Next, we need to figure out our roles and responsibilities, our Git flowchart, hash out the steps to success, and what’s going to get done, if anything, this weekend (remember we started the project on Friday this time).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_142945.jpg&quot; alt=&quot;git flowchart&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Our Git flowchart&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_163745.jpg&quot; alt=&quot;thinking through how to make this app work&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Thinking through how to make this actually work!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_142422.jpg&quot; alt=&quot;steps to success&quot; /&gt;&lt;/p&gt;
&lt;center&gt;High level steps to success of our app!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_165156.jpg&quot; alt=&quot;weekend plans&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Weekend plans for each team member!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;monday---thursday&quot;&gt;Monday - Thursday&lt;/h1&gt;

&lt;p&gt;Work, work, work, work, work! I’d say on an average we spent 12-14 hours a day working on this project… averaging ~50 hours of work collectively to hit our goal.&lt;/p&gt;

&lt;p&gt;In the end, we built a neat little application called &lt;strong&gt;Connect+&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;connect&quot;&gt;Connect+&lt;/h1&gt;

&lt;p&gt;Connect+ was built to be a Networking Event Attendance Management system where event owners can create events using a secret code, share it with attendees and attendees can check-in, view other attendees at the event and easily connect with them on Linkedin - all in one place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-homepage.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Homepage for Connect+&lt;/center&gt;

&lt;h2 id=&quot;why-and-what-it-really-is&quot;&gt;Why and What It Really Is&lt;/h2&gt;

&lt;p&gt;Have you ever been to a networking event where you met tons of people, only to forget to connect on LinkedIn or forget to grab business cards or forget their names!? With &lt;strong&gt;Connect+&lt;/strong&gt; you won’t need to worry about forgetting who was at the event! Simply log in with your LinkedIn credentials and enter the secret word given by the host, and you’ll see all the attendees at the same event!&lt;/p&gt;

&lt;p&gt;Haha, so that was our project pitch for why our app is so cool! What do ya think?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-api-call.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Check how cool, our app pulling in profile data from LinkedIn's API!!!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-create-new-event.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of event form. This is how a host creates an event and secret password&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Connect-Review-Event.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of event review, host creates an event, gets a secret code and shares code with attendees!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Connect-screenshot.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of the current attendees of the selected event. You can click on their picture and quickly connect on LinkedIn&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We’re very happy how everything turned out, although, the CSS could use a lot of work (we promised that we would reconnect one weekend and style it), the functionality of the app works perfectly. We are definitely proud of this project and really feel like it’s super valuable!! How cool would it be if we got LinkedIn to adopt it!&lt;/p&gt;

&lt;h2 id=&quot;technologies-used&quot;&gt;Technologies Used&lt;/h2&gt;
&lt;p&gt;For the back-end, Connect+ uses a PostgreSQL database. We accessed its Ruby on Rails API through Active Record, to return JSON to the front-end. The front-end is handled by AngularJS. Connect+’s API is hosted on Heroku, and the front-end is on FireBase. The application accesses the LinkedIn API through OAuth 2.0.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Connect+ requires two repositories. The back-end repo can be found at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LWatsonlm/Connect-Backend&quot;&gt;Back-End Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the back-end, install dependencies using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the front-end repo can be accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LWatsonlm/Connect-Frontend&quot;&gt;Front-End Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to install the front-end, please install dependencies using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;view-it-live&quot;&gt;View it live!&lt;/h2&gt;

&lt;p&gt;To view Connect+ live, please visit this link:
&lt;a href=&quot;https://connect-f6bd3.firebaseapp.com/&quot;&gt;View it Live!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-presentation&quot;&gt;The Presentation&lt;/h2&gt;

&lt;p&gt;Each member of the group had to participate in the presentation.&lt;/p&gt;

&lt;p&gt;The presentation should be 10-minutes, with 5 minutes allotted for questions.&lt;/p&gt;

&lt;h2 id=&quot;whew&quot;&gt;Whew!!!&lt;/h2&gt;

&lt;p&gt;What a week!! But it’s only Thursday so let’s get into Friday…&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips--intro-to-express--mongo--mongoose-intro&quot;&gt;Day 5: Slips &amp;amp;&amp;amp; Intro to Express &amp;amp;&amp;amp; Mongo / Mongoose Intro&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;

&lt;p&gt;You remember this, right? Digital flashcards in front of our class. We all take turns standing up in front of the class and answer a random question. One by one… so. much. fun. (can you sense the sarcasm?)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/alipa.png&quot; alt=&quot;Slips&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Slips!&lt;/center&gt;

&lt;h2 id=&quot;intro-to-express-25-hours&quot;&gt;Intro to Express: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Learning Objectives for Express:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List common reasons Javascript is used for server applications&lt;/li&gt;
  &lt;li&gt;Compare and contrast Javascript in the browser vs JS on the server&lt;/li&gt;
  &lt;li&gt;Compare and contrast express.js to Rails / Sinatra.&lt;/li&gt;
  &lt;li&gt;Use npm to manage project dependencies&lt;/li&gt;
  &lt;li&gt;Use module.exports and require to organize code&lt;/li&gt;
  &lt;li&gt;Use Handlebars templates to simplify rendering in express&lt;/li&gt;
  &lt;li&gt;Use and configure middleware, e.g. body-parser to handle form submissions&lt;/li&gt;
  &lt;li&gt;Link to static assets in an Express application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is SO much stuff. We’ve pretty much covered the entire stack. Everything we covered from here on out is an extension of what we’ve already learned or a different language than we’re used to. Today we talked about &lt;strong&gt;expressJS&lt;/strong&gt; the “e” in the MEAN stack. Which incidentally is super buzz-wordy right now. Express is a framework built on top of node.&lt;/p&gt;

&lt;p&gt;So, we &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save express&lt;/code&gt; and spent the class building our views with Handlebars, created forms with body-parser and completed our first Express app! Homework was assigned and campus lunch was served.&lt;/p&gt;

&lt;h2 id=&quot;campus-lunch&quot;&gt;Campus Lunch&lt;/h2&gt;

&lt;p&gt;Every other Friday, General Assembly serves campus lunch. It’s open to any and every student and instructor. It’s literally the best day ever.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161118_122835.jpg&quot; alt=&quot;CAMPUS LUNCH&quot; /&gt;&lt;/p&gt;
&lt;center&gt;FREEEEE LUNCH&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro-to-mongoose-25-hours&quot;&gt;Intro to Mongoose: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Learning Objectives for Mongoose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differentiate between NoSQL and SQL databases&lt;/li&gt;
  &lt;li&gt;Explain what Mongoose is&lt;/li&gt;
  &lt;li&gt;Describe the role of Mongoose schema and models&lt;/li&gt;
  &lt;li&gt;Use Mongoose to perform CRUD functionality&lt;/li&gt;
  &lt;li&gt;List and describe common Mongoose queries&lt;/li&gt;
  &lt;li&gt;Persist data using Mongoose embedded documents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In previous units, we used ActiveRecord to interact with and perform CRUD actions on a SQL database through a Ruby back-end. Today, we did the equivalent with a tool called Mongoose on a NoSQL database using a Node back-end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;MongoDB&lt;/em&gt;&lt;/strong&gt; is a NoSQL database that stores information as JSON (technically, it’s BJSON – “binary JSON.”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mongoose&lt;/em&gt;&lt;/strong&gt; is an ODM (Object Data Mapping), that allows us to use our data in our application. It also gives additional helpers, functions and queries to easily perform CRUD actions.&lt;/p&gt;

&lt;p&gt;Mongoose provides similar functionality to interact with MongoDB and Express as Active Record did with PostgreSQL and Rails.&lt;/p&gt;

&lt;p&gt;We created Mongoose Schemas, Models, reviewed and practiced Callback Functions, Promises, Created Seed Data, Mongoose Queries and implement CRUD. It has been a long week and this lesson was definitely a tough one.&lt;/p&gt;

&lt;p&gt;I’m beyond exhausted and ready to call it a day. On to happy hour!&lt;/p&gt;

&lt;p&gt;Thanks again and see you next week!&lt;/p&gt;
</description>
				<pubDate>Sun, 13 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/13/week9.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/13/week9.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 9 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Hey, hey, hey! This week was Project 3 week. On Friday morning, we found out who was in our group and some people weren’t too happy about their group assignments. Luckily, I was put into a group with two awesome classmates and we spent the entire morning setting group norms, figuring out our roles and responsibilities, and brainstorming ideas for our project!&lt;/p&gt;

&lt;h1 id=&quot;the-project-requirements&quot;&gt;The Project Requirements&lt;/h1&gt;

&lt;p&gt;Our instructors partnered us up for this project. This was meant to push us both technically and collaboratively. As developers, we will, almost certainly, be joining a development team during our careers. So, it’s important to learn how to work together.&lt;/p&gt;

&lt;p&gt;We must work together to architect, design, and build an app with two major components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An API of your own design, built using Rails, which serves JSON.&lt;/li&gt;
  &lt;li&gt;Front-end Angular code that updates the UI, and makes requests to the API using AJAX.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;our-first-team-meeting&quot;&gt;Our First Team Meeting&lt;/h1&gt;

&lt;p&gt;We spent a lot of time discussing and debating on the project topic. All three of us had very strong opinions on what type of project we should do. For instance, I wanted to create an application focusing on Google Maps API that stored prices on different items around the D.C. area. Other ideas included using an API from IBM that could do voice recognition (a bit much for a 4-day project!) and a networking application using Linkedin API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/project-brainstorm.jpg&quot; alt=&quot;Brainstorming&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A whiteboard of our brainstorming&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After creating ERDs, user stories and sketches of our top three projects, we finally decided to build a check-in application for networking events using LinkedIn’s API for user oAuth. We couldn’t decide on a name for it, so we did what any other project team would do and gave it a code name: &lt;strong&gt;Tatiana.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_120352.jpg&quot; alt=&quot;Teammates&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/IMG_20161028_120339.jpg&quot; alt=&quot;Teammates&quot; /&gt;&lt;/p&gt;
&lt;center&gt;My group and me planning out Tatiana&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Alright! So we have our project idea. Next, we need to figure out our roles and responsibilities, our Git flowchart, hash out the steps to success, and what’s going to get done, if anything, this weekend (remember we started the project on Friday this time).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_142945.jpg&quot; alt=&quot;git flowchart&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Our Git flowchart&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_163745.jpg&quot; alt=&quot;thinking through how to make this app work&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Thinking through how to make this actually work!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_142422.jpg&quot; alt=&quot;steps to success&quot; /&gt;&lt;/p&gt;
&lt;center&gt;High level steps to success of our app!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_165156.jpg&quot; alt=&quot;weekend plans&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Weekend plans for each team member!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;monday---thursday&quot;&gt;Monday - Thursday&lt;/h1&gt;

&lt;p&gt;Work, work, work, work, work! I’d say on an average we spent 12-14 hours a day working on this project… averaging ~50 hours of work collectively to hit our goal.&lt;/p&gt;

&lt;p&gt;In the end, we built a neat little application called &lt;strong&gt;Connect+&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;connect&quot;&gt;Connect+&lt;/h1&gt;

&lt;p&gt;Connect+ was built to be a Networking Event Attendance Management system where event owners can create events using a secret code, share it with attendees and attendees can check-in, view other attendees at the event and easily connect with them on Linkedin - all in one place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-homepage.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Homepage for Connect+&lt;/center&gt;

&lt;h2 id=&quot;why-and-what-it-really-is&quot;&gt;Why and What It Really Is&lt;/h2&gt;

&lt;p&gt;Have you ever been to a networking event where you met tons of people, only to forget to connect on LinkedIn or forget to grab business cards or forget their names!? With &lt;strong&gt;Connect+&lt;/strong&gt; you won’t need to worry about forgetting who was at the event! Simply log in with your LinkedIn credentials and enter the secret word given by the host, and you’ll see all the attendees at the same event!&lt;/p&gt;

&lt;p&gt;Haha, so that was our project pitch for why our app is so cool! What do ya think?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-api-call.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Check how cool, our app pulling in profile data from LinkedIn's API!!!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-create-new-event.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of event form. This is how a host creates an event and secret password&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Connect-Review-Event.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of event review, host creates an event, gets a secret code and shares code with attendees!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Connect-screenshot.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of the current attendees of the selected event. You can click on their picture and quickly connect on LinkedIn&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We’re very happy how everything turned out, although, the CSS could use a lot of work (we promised that we would reconnect one weekend and style it), the functionality of the app works perfectly. We are definitely proud of this project and really feel like it’s super valuable!! How cool would it be if we got LinkedIn to adopt it!&lt;/p&gt;

&lt;h2 id=&quot;technologies-used&quot;&gt;Technologies Used&lt;/h2&gt;
&lt;p&gt;For the back-end, Connect+ uses a PostgreSQL database. We accessed its Ruby on Rails API through Active Record, to return JSON to the front-end. The front-end is handled by AngularJS. Connect+’s API is hosted on Heroku, and the front-end is on FireBase. The application accesses the LinkedIn API through OAuth 2.0.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Connect+ requires two repositories. The back-end repo can be found at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LWatsonlm/Connect-Backend&quot;&gt;Back-End Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the back-end, install dependencies using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the front-end repo can be accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LWatsonlm/Connect-Frontend&quot;&gt;Front-End Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to install the front-end, please install dependencies using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;view-it-live&quot;&gt;View it live!&lt;/h2&gt;

&lt;p&gt;To view Connect+ live, please visit this link:
&lt;a href=&quot;https://connect-f6bd3.firebaseapp.com/&quot;&gt;View it Live!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-presentation&quot;&gt;The Presentation&lt;/h2&gt;

&lt;p&gt;Each member of the group had to participate in the presentation.&lt;/p&gt;

&lt;p&gt;The presentation should be 10-minutes, with 5 minutes allotted for questions.&lt;/p&gt;

&lt;h2 id=&quot;whew&quot;&gt;Whew!!!&lt;/h2&gt;

&lt;p&gt;What a week!! But it’s only Thursday so let’s get into Friday…&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips--intro-to-express--mongo--mongoose-intro&quot;&gt;Day 5: Slips &amp;amp;&amp;amp; Intro to Express &amp;amp;&amp;amp; Mongo / Mongoose Intro&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;

&lt;p&gt;You remember this, right? Digital flashcards in front of our class. We all take turns standing up in front of the class and answer a random question. One by one… so. much. fun. (can you sense the sarcasm?)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/alipa.png&quot; alt=&quot;Slips&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Slips!&lt;/center&gt;

&lt;h2 id=&quot;intro-to-express-25-hours&quot;&gt;Intro to Express: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Learning Objectives for Express:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List common reasons Javascript is used for server applications&lt;/li&gt;
  &lt;li&gt;Compare and contrast Javascript in the browser vs JS on the server&lt;/li&gt;
  &lt;li&gt;Compare and contrast express.js to Rails / Sinatra.&lt;/li&gt;
  &lt;li&gt;Use npm to manage project dependencies&lt;/li&gt;
  &lt;li&gt;Use module.exports and require to organize code&lt;/li&gt;
  &lt;li&gt;Use Handlebars templates to simplify rendering in express&lt;/li&gt;
  &lt;li&gt;Use and configure middleware, e.g. body-parser to handle form submissions&lt;/li&gt;
  &lt;li&gt;Link to static assets in an Express application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is SO much stuff. We’ve pretty much covered the entire stack. Everything we covered from here on out is an extension of what we’ve already learned or a different language than we’re used to. Today we talked about &lt;strong&gt;expressJS&lt;/strong&gt; the “e” in the MEAN stack. Which incidentally is super buzz-wordy right now. Express is a framework built on top of node.&lt;/p&gt;

&lt;p&gt;So, we &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save express&lt;/code&gt; and spent the class building our views with Handlebars, created forms with body-parser and completed our first Express app! Homework was assigned and campus lunch was served.&lt;/p&gt;

&lt;h2 id=&quot;campus-lunch&quot;&gt;Campus Lunch&lt;/h2&gt;

&lt;p&gt;Every other Friday, General Assembly serves campus lunch. It’s open to any and every student and instructor. It’s literally the best day ever.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161118_122835.jpg&quot; alt=&quot;CAMPUS LUNCH&quot; /&gt;&lt;/p&gt;
&lt;center&gt;FREEEEE LUNCH&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro-to-mongoose-25-hours&quot;&gt;Intro to Mongoose: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Learning Objectives for Mongoose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differentiate between NoSQL and SQL databases&lt;/li&gt;
  &lt;li&gt;Explain what Mongoose is&lt;/li&gt;
  &lt;li&gt;Describe the role of Mongoose schema and models&lt;/li&gt;
  &lt;li&gt;Use Mongoose to perform CRUD functionality&lt;/li&gt;
  &lt;li&gt;List and describe common Mongoose queries&lt;/li&gt;
  &lt;li&gt;Persist data using Mongoose embedded documents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In previous units, we used ActiveRecord to interact with and perform CRUD actions on a SQL database through a Ruby back-end. Today, we did the equivalent with a tool called Mongoose on a NoSQL database using a Node back-end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;MongoDB&lt;/em&gt;&lt;/strong&gt; is a NoSQL database that stores information as JSON (technically, it’s BJSON – “binary JSON.”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mongoose&lt;/em&gt;&lt;/strong&gt; is an ODM (Object Data Mapping), that allows us to use our data in our application. It also gives additional helpers, functions and queries to easily perform CRUD actions.&lt;/p&gt;

&lt;p&gt;Mongoose provides similar functionality to interact with MongoDB and Express as Active Record did with PostgreSQL and Rails.&lt;/p&gt;

&lt;p&gt;We created Mongoose Schemas, Models, reviewed and practiced Callback Functions, Promises, Created Seed Data, Mongoose Queries and implement CRUD. It has been a long week and this lesson was definitely a tough one.&lt;/p&gt;

&lt;p&gt;I’m beyond exhausted and ready to call it a day. On to happy hour!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161102_220319.jpg&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;My team after a long, hard week!&lt;/center&gt;

&lt;p&gt;Thanks again and see you next week!&lt;/p&gt;
</description>
				<pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/11/06/week9.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/06/week9.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 8 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Last week was Project 2 week. We’re half way there, with only two more projects to go. Week 8 is the week I really started to feel the burn… there’s a lot of new technologies thrown at us and my brain is exploding with taking it all in.&lt;/p&gt;

&lt;p&gt;This week, we talk APIs, AJAX, Building our own API, Firebase and the introduction to Project 3. Full warning: This is a beefy week so this post is pretty long. Let’s get started!&lt;/p&gt;

&lt;h1 id=&quot;day-1-ui-router--apis-and-ajax&quot;&gt;Day 1: UI Router &amp;amp;&amp;amp; APIs and AJAX&lt;/h1&gt;

&lt;p&gt;For today, we dive deeper into technologies that I have zero prior experience on… exciting, but frightening all in one. Did it just get hot in here?&lt;/p&gt;

&lt;h2 id=&quot;ui-router-25-hours&quot;&gt;UI Router: 2.5 hours: &lt;/h2&gt;

&lt;p&gt;Learning Objectives on UI Router:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain what dependency injection is and what problem it solves&lt;/li&gt;
  &lt;li&gt;Explain the purpose of templates in Angular&lt;/li&gt;
  &lt;li&gt;Create separate views and routes for each CRUD action&lt;/li&gt;
  &lt;li&gt;Use the ui-view directive to load angular templates&lt;/li&gt;
  &lt;li&gt;Use $stateProvider and $state to access query parameters and update the URL&lt;/li&gt;
  &lt;li&gt;Define multiple controllers in a single module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, we’ve been using Angular to create some powerful front-end SPAs (Single Page Applications).&lt;/p&gt;

&lt;p&gt;Single Page Applications are Web apps that load a single HTML page and dynamically update that page as the user interacts with the app. SPAs use AJAX and HTML5 to create fluid and responsive web apps, without constant page reloads.&lt;/p&gt;

&lt;p&gt;The beautiful of this is it completely cuts out the reload (that quick white blank screen you see when you click on links) and renders a &lt;strong&gt;state&lt;/strong&gt; instead of reloading. A &lt;strong&gt;state&lt;/strong&gt; in Angular is basically a route: it’s an umbrella term for a URL, the view associated with it, and any controllers used in that view.&lt;/p&gt;

&lt;p&gt;In class, we walk through injecting dependencies and configuring the &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt; for an Angular app, called Stoplight.&lt;/p&gt;

&lt;p&gt;First, we inject the &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt; dependency in our Angular app:
&lt;code class=&quot;highlighter-rouge&quot;&gt;js
angular.module(&quot;stoplightApp&quot;, [ui.router])
&lt;/code&gt;
From here, we added routes to our config file, defined a state, using &lt;code class=&quot;highlighter-rouge&quot;&gt;$stateProvider&lt;/code&gt; created views that are attached to our controller (one view for one controller) using &lt;code class=&quot;highlighter-rouge&quot;&gt;templateUrl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally, displaying it on the browser using &lt;code class=&quot;highlighter-rouge&quot;&gt;data-ui-view&lt;/code&gt; to render Angular inside HTML.&lt;/p&gt;

&lt;p&gt;Whew. It’s lunch time and I’m definitely reviewing all of this during our two-hour lunch break.&lt;/p&gt;

&lt;h2 id=&quot;apis-and-ajax-25-hours&quot;&gt;APIs and AJAX: 2.5 hours:&lt;/h2&gt;

&lt;p&gt;Back into the beast of unknown territory! Horray! Honestly, I’m feeling the heat but staying optimistic.&lt;/p&gt;

&lt;p&gt;Learning Objectives of APIs and AJAX:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the difference between synchronous and asynchronous program execution&lt;/li&gt;
  &lt;li&gt;Explain why synchronous program execution is not conducive to the front-end.&lt;/li&gt;
  &lt;li&gt;Use jQuery $.ajax() method to make asynchronous GET requests for data.&lt;/li&gt;
  &lt;li&gt;Use jQuery’s ‘promise-like’ methods to handle AJAX responses asynchronously.&lt;/li&gt;
  &lt;li&gt;Render new HTML content using data loaded from an Ajax request.&lt;/li&gt;
  &lt;li&gt;Perform POST, PUT, and DELETE requests to an API to modify data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our first task in class was to open &lt;a href=&quot;https://www.google.com/maps&quot;&gt;Google Maps&lt;/a&gt; and answer the question: what’s happening asynchronously? Spoiler alert: The answer is everything.&lt;/p&gt;

&lt;p&gt;From here, we discussed APIs, Application Program Interfaces, which are commonly known as web data that can be accessed and used for raw data.&lt;/p&gt;

&lt;p&gt;API data comes in two different formats: &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; (Javascript Object Notation) and &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt; (eXensive Markup Language). For this class (and hopefully for life) we focused on JSON.&lt;/p&gt;

&lt;p&gt;JSON looks a little something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and XML looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;users&amp;gt;
  &amp;lt;user id=&quot;23&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[Bob]]&amp;gt;&amp;lt;/name&amp;gt;
  &amp;lt;/user&amp;gt;
  &amp;lt;user id=&quot;72&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[Tim]]&amp;gt;&amp;lt;/name&amp;gt;
  &amp;lt;/user&amp;gt;
&amp;lt;/users&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yeah, my eyes definitely prefer JSON.&lt;/p&gt;

&lt;p&gt;Next in class, we got to play with a couple of different APIs! First, we made GET requests to &lt;a href=&quot;https://api.giphy.com/&quot;&gt;Giphy’s API&lt;/a&gt; and found some cool cat gifs.&lt;/p&gt;

&lt;p&gt;Using $.ajax, a jQuery method:&lt;/p&gt;

&lt;p&gt;We all requested an API key from &lt;a href=&quot;https://www.wunderground.com/weather/api/d/docs&quot;&gt;Weather Underground API&lt;/a&gt; and used &lt;code class=&quot;highlighter-rouge&quot;&gt;$.ajax&lt;/code&gt; (Asynchronous Javascript and XML) to make GET requests to bring in data.&lt;/p&gt;

&lt;p&gt;Here’s an example of what I mean:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Make sure to add your API key to the URL!&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://api.wunderground.com/api/your_key/geolookup/conditions/q/va/midlothian.json&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// $.ajax takes an object as an argument with at least three key-value pairs...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (1) The URL endpoint for the JSON object.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (2) Type of HTTP request.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (3) Datatype. Usually JSON.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ajax request success!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ajax request fails!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This always happens regardless of successful ajax request or not.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With APIs, you can do much more than GET requests… we can create POST, PUT, DELETE, etc requests as well. However, I don’t think Weather API would allow us to modify their data, which means, we’ll have to build our own API instead… And that’s exactly what we did next in class.&lt;/p&gt;

&lt;p&gt;For the last hour of class, we updated our trusty &lt;code class=&quot;highlighter-rouge&quot;&gt;Tunr&lt;/code&gt; app using AJAX and CRUD to create the ultimate &lt;code class=&quot;highlighter-rouge&quot;&gt;Tunr Rails API&lt;/code&gt; app featuring every HTTP request!&lt;/p&gt;

&lt;p&gt;The biggest takeaway from today’s session: APIs are freaking cool AND &lt;strong&gt;It is very important&lt;/strong&gt; that developers do not push API keys to a public Github repo. There’s some pretty scary &lt;a href=&quot;https://wptavern.com/ryan-hellyers-aws-nightmare-leaked-access-keys-result-in-a-6000-bill-overnight&quot;&gt;horror stories out there…&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes--angular-resources&quot;&gt;Day 2: Outcomes &amp;amp;&amp;amp; Angular Resources&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes: 2.5 Hours:&lt;/h2&gt;
&lt;p&gt;Today in Outcomes, we focused on building our online General Assembly Alumni Profile in class. Online Alumni Profiles are the best way for GA’s employment partners to reach students directly regarding new opportunities. This session was dedicated to building our Alumni Profile utilizing our Brand Statement, Resume and Job Search Strategy.&lt;/p&gt;

&lt;p&gt;Feel free to check out my &lt;a href=&quot;https://profiles.generalassemb.ly/lmwatson&quot;&gt;General Assembly Profile&lt;/a&gt; Shoot me and email. I love emails! And I really love emails with potential job opportunities inside of them.&lt;/p&gt;

&lt;h2 id=&quot;angular-resources-25-hours&quot;&gt;Angular Resources: 2.5 Hours:&lt;/h2&gt;

&lt;p&gt;Another big class with so many new things to learn. This lesson focused on a couple of Angular’s Resources: Factories, Services and ngResource.&lt;/p&gt;

&lt;p&gt;Learning Objectives of Angular Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the purpose of Factories in Angular.&lt;/li&gt;
  &lt;li&gt;Use ngResource to pull information from an API.&lt;/li&gt;
  &lt;li&gt;Use $stateParams to access query parameters and update the URL.&lt;/li&gt;
  &lt;li&gt;Create separate views and routes for each CRUD action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the last couple of classes, we used hard coded data to act as our “backend”.  Those days are over and instead, we’ll be connecting to an external API using resources and providing an interface to models using factories.&lt;/p&gt;

&lt;p&gt;We start by cloning down a repo with a Rails API. Our front-end in-class application will make AJAX calls to that API. First, we convert the hardcoded data to read from an external API using a Factory.&lt;/p&gt;

&lt;p&gt;A Factory is an Angular Component that generates new instances of something.&lt;/p&gt;

&lt;p&gt;For this in class assignment, we were told not code along. Btw, I’m REALLY bad at not coding along… It feels unnatural to sit and watch when there’s coding to be done!&lt;/p&gt;

&lt;p&gt;We watched as our instructor walked through each step building a CRUD  (create, read, update, delete) application. Between each step, we were given 10-15 mins to complete the CRUD step locally. Going back and forth between watching and doing, we completed creating RESTful routes and using a Factory to query our API.&lt;/p&gt;

&lt;p&gt;Homework was assigned and I’m feeling overwhelmed on a Tuesday.&lt;/p&gt;

&lt;h1 id=&quot;day-3-apis-api--firebase&quot;&gt;Day 3: APIs API &amp;amp;&amp;amp; FireBase&lt;/h1&gt;

&lt;p&gt;I spent 4 extra hours at school yesterday due to wrapping my head around our homework assignment on Angular Resources, Factories, and AJAX calls. Feeling a bit tired today but excited because we’re building our own API and getting closer to Project 3!&lt;/p&gt;

&lt;h2 id=&quot;apis-25-hours&quot;&gt;APIs: 2.5 Hours:&lt;/h2&gt;

&lt;p&gt;So, we have used third-party APIs and we have used our instructor’s custom built API… now it’s time we learn how to create our OWN API from the ground up! This will serve up JSON and render HTML views.&lt;/p&gt;

&lt;p&gt;Learning Objectives of APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Describe what an API is, and why we might use one.&lt;/li&gt;
  &lt;li&gt;Describe the purpose and syntax of respond_to&lt;/li&gt;
  &lt;li&gt;Make a Rails app that provides a JSON API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We start off the class with an API Exploration. Taking about 10 mins, we searched some popular APIs and discussed our opinions on them.&lt;/p&gt;

&lt;p&gt;Next, we make a couple of basic HTTP requests to an API, using &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/postman.png&quot; alt=&quot;Postman&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Closer Look at an API Request&lt;/center&gt;

&lt;p&gt;After poking around with that, we dive into the meat of the lesson, building a Rails API to serve JSON.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We spend the rest of the morning rendering json and feeling super proud of our custom API. Lunch time.&lt;/p&gt;

&lt;h2 id=&quot;firebaseangularfire-25-hours&quot;&gt;FireBase/AngularFire: 2.5 Hours:&lt;/h2&gt;

&lt;p&gt;Up until this point, we’ve used Postgres and SQL to persist data. Today we explored an alternative: Firebase.&lt;/p&gt;

&lt;p&gt;What Is Firebase?&lt;/p&gt;

&lt;p&gt;Firebase is a PaaS, or “Platform as a Service.” That means it offers a number of cloud-based computing services, including the one that matters to us today: a realtime database. Not only can we access a Firebase DB programmatically using code, but we can also interact with data via a graphical interface in the browser.&lt;/p&gt;

&lt;p&gt;Unlike Postgres, Firebase is a NoSQL database. This means that information is not stored in tables and it does not make use of associations like &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt;. Instead, information in a NoSQL database is stored in one big JSON tree.&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of my database in Firebase:
&lt;img src=&quot;/img/firebase.png&quot; alt=&quot;Firebase&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Closer Look at an API Request&lt;/center&gt;

&lt;p&gt;One way to connect an Angular application to a Firebase DB is AngularFire.&lt;/p&gt;

&lt;p&gt;We spent the rest of class building the classic, TODO app, using Firebase DB to persist data.&lt;/p&gt;

&lt;p&gt;No new homework tonight but homework is due tomorrow at 9am so I stayed at school to complete my assignments.&lt;/p&gt;

&lt;h1 id=&quot;day-4-lab&quot;&gt;Day 4: Lab!!!&lt;/h1&gt;

&lt;p&gt;Homework is all turned in and now it’s time for a lab day.&lt;/p&gt;

&lt;p&gt;Oh, lab day. You always come at the right time. Feeling overwhelmed, lab day is such a blessing. It’s time to sit down, break some code, and bring the week all together.&lt;/p&gt;

&lt;p&gt;Today’s lab is pretty cool, too. We’re building a WDI Radio. This radio has Artist data, as well as their Songs, it should serve JSON and hosted with Firebase DB.&lt;/p&gt;

&lt;p&gt;This was a fun lab that really helped me understand the power of Firebase.&lt;/p&gt;

&lt;p&gt;We ended out the day with submitting up to 5 names of students that we would want to be in a group with. Honestly, I didn’t really like this format of picking groups… It just feels so exclusive. But I submitted my suggestions and (im)patiently waited for group announcements on Friday.&lt;/p&gt;

&lt;h1 id=&quot;day-5-project-3---group-project&quot;&gt;Day 5: PROJECT 3 - Group Project!&lt;/h1&gt;

&lt;p&gt;After, what felt like the longest week ever, Friday is here and so is Project 3… our first and only group project!&lt;/p&gt;

&lt;p&gt;Everyone in class has been very anxious to see who is in who’s group. And drumroll, please…………….  I was put into an AWESOME group of two other rockstar classmates. Yeah! This is going to be great.&lt;/p&gt;

&lt;p&gt;Whoaaa. That was a long week and a long read. Thanks for sticking with me until the end and make sure to check out next week to see how our group project turned out!&lt;/p&gt;

&lt;p&gt;Until Then!&lt;/p&gt;
</description>
				<pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/11/06/week8.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/06/week8.html</guid>
			</item>
		
	</channel>
</rss>
