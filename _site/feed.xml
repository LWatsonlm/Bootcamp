<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Tech Eats: Stories of Tech and Food</title>
		<description>Tech Eats: Tech and Food Stuff</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 11 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Okay, people! It’s Week 11 and it’s our last “real” week of class. This week, we’re learning about Facebook’s language: React.  It’s also the week we start our final capstone project, Project 4. But first, React.&lt;/p&gt;

&lt;h1 id=&quot;day-1-intro-to-react&quot;&gt;Day 1: Intro to React&lt;/h1&gt;

&lt;p&gt;React was first used by Facebook in 2011 and Instagram in 2012. It’s a library used to craft modern day UI and create views for the front-end in the web client and native applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-white.png&quot; alt=&quot;react&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives of React:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain what ReactJS is and where it fits in our applications’ stack.&lt;/li&gt;
  &lt;li&gt;Explain the component model of web development.&lt;/li&gt;
  &lt;li&gt;Create and render React components in the browser.&lt;/li&gt;
  &lt;li&gt;Pass in data to a React component via props.&lt;/li&gt;
  &lt;li&gt;Nest React components.&lt;/li&gt;
  &lt;li&gt;Modify the state of a React component through events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we start up our in-class application by running a couple of commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i -g create-react-app
$ create-react-app blog-app
$ cd blog-app
$ npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm run start&lt;/code&gt;, lets you view the React app at http://localhost:3000&lt;/p&gt;

&lt;p&gt;Another big component of React is the… Components. We took a look at different websites in class and broke down each site as a component. For example, that would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/component.png&quot; alt=&quot;component&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Example of how to break down components of a webpage&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another big component of React is it’s Virtual DOM. The Virtual DOM is a Javascript representation of the actual DOM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Because of that, React can keep track of changes in the actual DOM by comparing different instances of the Virtual DOM.&lt;/li&gt;
  &lt;li&gt;React then isolates the changes between old and new instances of the Virtual DOM and then only updates the actual DOM with the necessary changes.&lt;/li&gt;
  &lt;li&gt;By only making the “necessary changes,” as opposed to re-rendering an entire view altogether, we save up on processing power.&lt;/li&gt;
  &lt;li&gt;This is not unlike Git, with which you compare the difference – or &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; – between two commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/V-DOM.png&quot; alt=&quot;Virtual DOM&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Virtual DOM&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more about the Virtual DOM, &lt;a href=&quot;https://www.youtube.com/watch?v=-DX3vJiqxm4&quot;&gt;check this video out.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won’t go too much more into React, since this isn’t a React tutorial ;)&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes-and-react-continued&quot;&gt;Day 2: Outcomes and React Continued&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Today in Outcomes we had a couple of industry leaders come into the classroom to chat about the dreaded technical interview! This was to help calm our nerves and prepare to nail our interviews.&lt;/p&gt;

&lt;p&gt;We experienced first hand what it’s like to be in a technical interview setting and got tips on how to prepare. We practiced with each other and with industry leaders on general technical questions, what to do or say when you don’t know the answer and examples of interview scenarios. It was a great lesson and helped curve my expectations of what to expect during an interview. I definitely have some studying to do.&lt;/p&gt;

&lt;h2 id=&quot;react-practice-paradigms-and-principles-25-hours&quot;&gt;React: Practice, Paradigms, and Principles: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/React2.jpg&quot; alt=&quot;React&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Objectives&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differentiate between Object-Oriented Programming and Functional Programming paradigms&lt;/li&gt;
  &lt;li&gt;Explain how React incorporates principles of Functional Programming&lt;/li&gt;
  &lt;li&gt;Identify state in a React app&lt;/li&gt;
  &lt;li&gt;Define the role of Container components and when to use them&lt;/li&gt;
  &lt;li&gt;Use jQuery to make AJAX calls in a React app&lt;/li&gt;
  &lt;li&gt;Explain the ways to add styles to a React app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In today’s class we practiced building a React app that’s more complex than the intro’s simple blog example. When building an app like this, it’s important to keep certain development practices and paradigms in mind so that we can write maintainable code.&lt;/p&gt;

&lt;h2 id=&quot;first-components&quot;&gt;F.I.R.S.T. Components&lt;/h2&gt;

&lt;p&gt;A React component is built to expect an input and render a UI with it. More importantly, a (well-structured) component only receives data specific to its purpose.&lt;/p&gt;

&lt;p&gt;While this doesn’t sound too groundbreaking, it is very different from the OOP principles we’ve gotten used to. This is because React follows a more functional approach to programming. For React components under this approach, the same input will always produce the same output.&lt;/p&gt;

&lt;p&gt;There’s a lot of different ways to build an app, but for React, we talked about what a component should be: &lt;strong&gt;F.I.R.S.T.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focused&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should do one thing and do it well. One thing that’s hard to adjust to in React coming from an OOP background is packing too much information into a component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Independent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should increase cohesion and reduce coupling. Behavior in one component should not impact the behavior of another. In other words, components should not rely on one another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reusable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Components should be written in a way that reduces the duplication of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ideally, components should be short and condensed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because the same input will always produce the same output, components are easily unit testable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-example.png&quot; alt=&quot;React&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Simple React Component Example&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reacts-state&quot;&gt;React’s State&lt;/h2&gt;

&lt;p&gt;So, why did we learn these principles? Because in React, it’s very to lose control of our application’s state. When I say “state”, I mean the properties of a component that change as the application runs.&lt;/p&gt;

&lt;p&gt;Like for example, beginning a new game of Pokemon, what is the state of a new game? Well, you have 0 Pokemon and you’re still in Pallet Town. What is the state of Pokemon when you win the game? You have 8 badges and you’ve defeated the Elite Four. So, what’s the common theme here, when changes a state? An Event!&lt;/p&gt;

&lt;h2 id=&quot;in-class-lab&quot;&gt;In Class Lab&lt;/h2&gt;

&lt;p&gt;To learn more about React, we built a movie browser application, allowing users to enter a search term, and view results of movies via the OMDB API.&lt;/p&gt;

&lt;p&gt;If we got stuck, our instructors were around to help. At the end of the class, we were given the solution branch to check alternative ways on how to build this app.&lt;/p&gt;

&lt;h1 id=&quot;day-3-all-day-react-lab&quot;&gt;Day 3: All Day React Lab&lt;/h1&gt;

&lt;p&gt;Today’s objective is to apply the fundamentals of what we learned so far by building a Todo app in React.&lt;/p&gt;

&lt;p&gt;Why build a todo app?&lt;/p&gt;

&lt;p&gt;Because it is the prototypical CRUD app that will test your web development skills with a different technology in a familiar domain.&lt;/p&gt;

&lt;p&gt;I had a lot of trouble with this lab, but it definitely helped me understand all the things I needed to study up on. Ultimately, I used this &lt;a href=&quot;https://www.kirupa.com/react/simple_todo_app_react.htm&quot;&gt;very helpful Todo tutorial&lt;/a&gt; that helped walked through some concepts and techniques I was having trouble with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/finished_todo.png&quot; alt=&quot;Finished Todo App&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Finished Todo app from the tutorial&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-4--5-project-4-intro&quot;&gt;Day 4 &amp;amp;&amp;amp; 5: Project 4 Intro&lt;/h1&gt;

&lt;p&gt;THIS IS IT. We’ve come a long way, and it’s time to show it. Project 4 should be the most advanced project to date.&lt;/p&gt;

&lt;p&gt;We get to call the shots and invent our own idea, choosing a framework &amp;amp; tools that are appropriate for whatever we want to build. Pulling from everything we’ve learned so far, and try to tackle something that will push us a little outside of our comfort zone.&lt;/p&gt;

&lt;p&gt;We had to sure to review our project proposal with one of our instructors just to make sure it’s something we can accomplish in the limited time that we have.&lt;/p&gt;

&lt;h2 id=&quot;technical-suggestions&quot;&gt;Technical Suggestions&lt;/h2&gt;

&lt;p&gt;The app must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be a complete product,&lt;/strong&gt; which most likely means multiple relationships and CRUD functionality for at least a couple models&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement thoughtful user stories&lt;/strong&gt; that are significant enough to help you know which features to build and which to scrap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be deployed online&lt;/strong&gt; so it’s publicly accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I spent a good chuck of time deciding on a project idea, writing out pseudocode, creating ERDs and researched various APIs to pick the most suited technology for my project.&lt;/p&gt;

&lt;p&gt;Stay tuned to hear about my project idea. Head’s up - Next week is a short week - it’s Thanksgiving!&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 27 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/27/week11.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/27/week11.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 10 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Welcome back to week 10 out of 13. We’re almost there, folks. Thanks for sticking with me. As you could imagine, I am exhausted. Maybe you feel exhausted from just READING about the bootcamp? However, we’re in the last stretch and there’s no time to slow down now. This week is mostly composed of Labs, Voting due to it being Election Week, and a lot of tears and hugs. What doesn’t kill you, only makes you stronger!! So here we go!”&lt;/p&gt;

&lt;h1 id=&quot;day-1-express--mongoose-25-hours&quot;&gt;Day 1: Express &amp;amp;&amp;amp; Mongoose: 2.5 Hours&lt;/h1&gt;

&lt;p&gt;So far we’ve learned about a number of tools: Node, Express, MongoDB and Mongoose. Developers use these tools to build server-side Javascript applications. We learn how to work each tool individually but we have not used them all together. So that’s what today is about. In today’s lesson, we will learn how to connect everything and create an app that can receive HTTP requests, retrieve data, make changes to a database and send information back to the end-user.&lt;/p&gt;

&lt;h2 id=&quot;learning-objectives-for-express-and-mongoose&quot;&gt;Learning Objectives for Express and Mongoose&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Identify how an Express app fits within the MVC framework.&lt;/li&gt;
  &lt;li&gt;Connect an Express app to a MongoDB database.&lt;/li&gt;
  &lt;li&gt;Implement CRUD functionality in an Express app using Mongoose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We started with a brand new application, called &lt;em&gt;When President&lt;/em&gt; (which happened to be very timely because it was election week). “When President” is a simple one page, CRUD application with hard coded dummy data. It was our job to take this application and implement Express and Mongoose.&lt;/p&gt;

&lt;p&gt;Since Rails was fresh in our minds, as a class, we created a Rails-to-Express transition guide. For instance, in Rails, we used PostgresSQL as our database. For Express, we’re going to use a MongoDB database.&lt;/p&gt;

&lt;p&gt;We also compared Mongoose to ActiveRecord for Rails. Mongoose is an ODM (Object Data Mapping) that we’re using to represent data from a Mongo database as models in a Javascript back-end.&lt;/p&gt;

&lt;p&gt;Via the command line, we installed Mongoose, created our &lt;code class=&quot;highlighter-rouge&quot;&gt;connection.js&lt;/code&gt; file, defined a schema using mongoose’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.Schema()&lt;/code&gt; method, defined a model using &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.model()&lt;/code&gt; and lastly connected to our database using &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.connect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mongoose.png&quot; alt=&quot;Mongoose&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Mongoose&lt;/center&gt;

&lt;p&gt;In those few steps, we were able to have a real connection to our Express application! Next, we seeded our database using Mongoose.&lt;/p&gt;

&lt;p&gt;After a short break, we got back into our application and created forms using &lt;code class=&quot;highlighter-rouge&quot;&gt;body-parser&lt;/code&gt;. Body-parser is a parsing middleware that let’s us handle form submissions.&lt;/p&gt;

&lt;p&gt;I won’t go into the rest of the lesson’s play by play. But for a Monday morning, we were definitely feeling the burn of knowledge. The heat is on!&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-3-hours&quot;&gt;Afternoon Lab: 3 Hours&lt;/h2&gt;

&lt;p&gt;In the afternoon, we had a lab assigned to us so we could apply what we’ve learned to a real life project. The lab was called &lt;em&gt;MEN Lab: URL Shortner&lt;/em&gt; … MEN as in Mongoose, Express and Node.&lt;/p&gt;

&lt;p&gt;The lab was due at 5pm and an instructor was available for office hours between 6pm-8pm. I stayed behind to really solidify today’s lesson and get a head start on the homework due on Thursday.&lt;/p&gt;

&lt;h1 id=&quot;day-2-election-day&quot;&gt;Day 2: Election Day!&lt;/h1&gt;

&lt;p&gt;To everyone’s surprise and enthusiasm, our cohort was given the day off so everyone had the chance to vote in the Presidential Election of 2016.&lt;/p&gt;

&lt;p&gt;So I took the morning to head out to the polls, sit in a 2.5-hour line, cast my vote and headed back to General Assembly to continue my homework assignments.&lt;/p&gt;

&lt;h1 id=&quot;day-3-checkpoint--mean-lab&quot;&gt;Day 3: Checkpoint &amp;amp;&amp;amp; MEAN Lab&lt;/h1&gt;

&lt;p&gt;It’s the day after elections. Okay, I won’t lie. Today was the most depressing day ever. Today was the hardest day for me because not only am I’m feeling overwhelmed with work but I’m mentally, physically, emotionally drained from the slap in my face that our Country did last night. That is all I will say about that.&lt;/p&gt;

&lt;h2 id=&quot;checkpoint-1-hour&quot;&gt;Checkpoint: 1 Hour&lt;/h2&gt;

&lt;p&gt;Checkpoints can be thought of a quiz you take to check where you are at in the material. This quiz is a timed assignment involving questions, coding exercising, and short answers. It’s open book, open notebook, but you may not speak to other students.&lt;/p&gt;

&lt;h2 id=&quot;mean-lab-the-rest-of-the-day&quot;&gt;MEAN Lab: The Rest of The Day&lt;/h2&gt;

&lt;p&gt;Another lab! Yes, please! As you know, labs are definitely my favorite time in all of the bootcamp. It’s time to play around, mess up things, break my application, cry, find that I missed a semicolon somewhere, do a dance, and reflect on all that I’ve learned.&lt;/p&gt;

&lt;p&gt;Today’s lab was an open-ended pair lab. It was up to the pair to come up with a project idea. However, it must fulfill the following technical requirements…&lt;/p&gt;

&lt;h2 id=&quot;technical-requirements&quot;&gt;Technical Requirements&lt;/h2&gt;

&lt;p&gt;Your application should be ME(A)N. This includes…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;strong&gt;Express&lt;/strong&gt; to handle HTTP requests and serve API endpoints.&lt;/li&gt;
  &lt;li&gt;Using &lt;strong&gt;MongoDB&lt;/strong&gt; as the database.&lt;/li&gt;
  &lt;li&gt;Using &lt;strong&gt;Mongoose&lt;/strong&gt; as the ODM.&lt;/li&gt;
  &lt;li&gt;Adding &lt;strong&gt;Angular&lt;/strong&gt; as your front-end. Express should only handle your root view as well as your API routes. Angular should take care of the rest via &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Your app should have CRUD functionality for at least one model.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Me and my partner, Tim, teamed up and quickly found a project idea. We both share the obsession of POKEMON! So we found an awesome &lt;a href=&quot;http://pokeapi.co/about/&quot;&gt;Pokemon API&lt;/a&gt; and create our own lightweight, fast, Pokedex… or should I say &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX&quot;&gt;RAPIDEX!!!!&lt;/a&gt;. &lt;strong&gt;Hint:&lt;/strong&gt; Click on that link to view our Github of the project.&lt;/p&gt;

&lt;p&gt;For our project, we did a lot of &lt;strong&gt;pair programming.&lt;/strong&gt; Pair programming is an agile software development technique in which two programmers work together on one computer. One, the driver, writes code while the other, the observer or navigator, reviews each line of code as it is typed in. The observer also helps with Googling any questions that arise.&lt;/p&gt;

&lt;p&gt;Tim was an excellent partner, who geeked out over Pokemon and programming with me. I’d work again with him anytime! #Poke4Lyfe&lt;/p&gt;

&lt;h1 id=&quot;day-4-websockets&quot;&gt;Day 4: WebSockets!&lt;/h1&gt;

&lt;p&gt;HTTP wasn’t designed for real-time, two-way communication. Meaning, it wasn’t designed for real-time data fetching, such as, let’s say you want to see your stocks update in real-time on the screen. What technology would you use? AJAX uses HTTP, where you “pull” information from a server (you make a request and you get something back). So that wouldn’t work for real-time data updating… Enter, WebSockets!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/websockets.png&quot; alt=&quot;web-sockets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is WebSockets? The official definition is:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WebSockets provides a standardized way for the server to send content to the browser without being solicited by the client and allowing for messages to be passed back and forth while keeping the connection open. In this way, a two-way (bi-directional) ongoing conversation can take place between a browser and the server.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By utilizing WebSockets, a client can open up a connection to a server that allows for the easy two-way transfer of data. This makes it great for real-time, event-driven web applications.&lt;/p&gt;

&lt;p&gt;Twitch and Slack are a couple of the notable web apps out there that are powered by WebSockets.&lt;/p&gt;

&lt;p&gt;Mozilla created a very cool game called &lt;a href=&quot;http://browserquest.mozilla.org/&quot;&gt;BrowserQuest&lt;/a&gt; using HTML canvas and WebSockets. Then in class, something awesome happened. We were instructed to play the game for the next 10 minutes! It wasn’t all fun and games while playing, we were asked to consider the following questions…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What pieces of information are being relayed between the client and server?&lt;/li&gt;
  &lt;li&gt;How often is information sent from the client to server or vice-versa?&lt;/li&gt;
  &lt;li&gt;What are some problems the developers who created this game might have had to consider when building it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/browserquest.png&quot; alt=&quot;browser&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Browser Quest! Game made in WebSockets&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We spent the rest of the day doing an in class lab, using the &lt;a href=&quot;http://socket.io/get-started/chat/&quot;&gt;Socket.io chat application&lt;/a&gt; tutorial. Very easy to follow guide for anyone curious about building a quick chat application! 2&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-25-hours&quot;&gt;Afternoon Lab: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;After lunch, we did another lab… I think the 4th lab this week? Today’s lab focused on Websockets, of course. We were to team up with a partner and create a simple game for two (or more) players. I teamed up with my partner from Project 3, Liza, and we set out to create a Tic Tac Toe game using Websockets! Fun times!&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips--all-day-lab&quot;&gt;Day 5: Slips &amp;amp;&amp;amp; All Day Lab&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;
&lt;p&gt;In the morning time, we did our usual stand up in front of the class and answer technical questions regarding the topics learned so far in class.&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-5-hours&quot;&gt;Afternoon Lab: 5 Hours&lt;/h2&gt;

&lt;p&gt;Today is was an all-day structured exercise in developing the skill most likely used in the industry: teaching yourself something new.&lt;/p&gt;

&lt;p&gt;We had to pick a useful library or technology stack of something we have not learned in class and build something! We could work alone or with partners.&lt;/p&gt;

&lt;p&gt;Tim (remember him?) and I decided to team back up together and keep working on our &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX&quot;&gt;RAPIDEX!!!!&lt;/a&gt; app! And we decided to spend the day learning &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt;, The Progressive JavaScript Framework for building user interfaces.&lt;/p&gt;

&lt;p&gt;We decided to use our existing Github repo and work off a new branch called &lt;strong&gt;vuejs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/vue.js.png&quot; alt=&quot;vue.js&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Vue.js, The Progressive JavaScript Framework&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If interested, please view our &lt;a href=&quot;https://github.com/LWatsonlm/RAPIDEX/tree/vuejs&quot;&gt;Vue.js Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;presentations&quot;&gt;Presentations&lt;/h2&gt;

&lt;p&gt;Each group had 10 minutes to present what they learned and demo their application.&lt;/p&gt;

&lt;p&gt;Some questions we answered during our presentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why does this technology exist / what problem does it solve?&lt;/li&gt;
  &lt;li&gt;Who built it / who maintains it?&lt;/li&gt;
  &lt;li&gt;How does this technology compare to anything we have learned in class so far?&lt;/li&gt;
  &lt;li&gt;Where did you go to learn this technology / what are some good resources out there?&lt;/li&gt;
  &lt;li&gt;What kind of apps are best suited for this technology?&lt;/li&gt;
  &lt;li&gt;What application did you build?&lt;/li&gt;
  &lt;li&gt;What do you most like about this technology / what do most not like about it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spending the day learning a new language, reading through the documentation and coming to that ah-ha moment, really solidify the fact learning how to code is a lifelong commitment. Technology is always involving and it’s important that we learn how to keep learning. Today was an excellent day and the assignment really challenged me.&lt;/p&gt;

&lt;p&gt;Alright, that wraps up another week! Thanks for reading! Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 20 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/20/week10.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/20/week10.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 9 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Hey, hey, hey! This week was Project 3 week. On Friday morning, we found out who was in our group and some people weren’t too happy about their group assignments. Luckily, I was put into a group with two awesome classmates and we spent the entire morning setting group norms, figuring out our roles and responsibilities, and brainstorming ideas for our project!&lt;/p&gt;

&lt;h1 id=&quot;the-project-requirements&quot;&gt;The Project Requirements&lt;/h1&gt;

&lt;p&gt;Our instructors partnered us up for this project. This was meant to push us both technically and collaboratively. As developers, we will, almost certainly, be joining a development team during our careers. So, it’s important to learn how to work together.&lt;/p&gt;

&lt;p&gt;We must work together to architect, design, and build an app with two major components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An API of your own design, built using Rails, which serves JSON.&lt;/li&gt;
  &lt;li&gt;Front-end Angular code that updates the UI, and makes requests to the API using AJAX.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;our-first-team-meeting&quot;&gt;Our First Team Meeting&lt;/h1&gt;

&lt;p&gt;We spent a lot of time discussing and debating on the project topic. All three of us had very strong opinions on what type of project we should do. For instance, I wanted to create an application focusing on Google Maps API that stored prices on different items around the D.C. area. Other ideas included using an API from IBM that could do voice recognition (a bit much for a 4-day project!) and a networking application using Linkedin API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/project-brainstorm.jpg&quot; alt=&quot;Brainstorming&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A whiteboard of our brainstorming&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After creating ERDs, user stories and sketches of our top three projects, we finally decided to build a check-in application for networking events using LinkedIn’s API for user oAuth. We couldn’t decide on a name for it, so we did what any other project team would do and gave it a code name: &lt;strong&gt;Tatiana.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_120352.jpg&quot; alt=&quot;Teammates&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/IMG_20161028_120339.jpg&quot; alt=&quot;Teammates&quot; /&gt;&lt;/p&gt;
&lt;center&gt;My group and me planning out Tatiana&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Alright! So we have our project idea. Next, we need to figure out our roles and responsibilities, our Git flowchart, hash out the steps to success, and what’s going to get done, if anything, this weekend (remember we started the project on Friday this time).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_142945.jpg&quot; alt=&quot;git flowchart&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Our Git flowchart&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_163745.jpg&quot; alt=&quot;thinking through how to make this app work&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Thinking through how to make this actually work!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_142422.jpg&quot; alt=&quot;steps to success&quot; /&gt;&lt;/p&gt;
&lt;center&gt;High level steps to success of our app!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161028_165156.jpg&quot; alt=&quot;weekend plans&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Weekend plans for each team member!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;monday---thursday&quot;&gt;Monday - Thursday&lt;/h1&gt;

&lt;p&gt;Work, work, work, work, work! I’d say on an average we spent 12-14 hours a day working on this project… averaging ~50 hours of work collectively to hit our goal.&lt;/p&gt;

&lt;p&gt;In the end, we built a neat little application called &lt;strong&gt;Connect+&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;connect&quot;&gt;Connect+&lt;/h1&gt;

&lt;p&gt;Connect+ was built to be a Networking Event Attendance Management system where event owners can create events using a secret code, share it with attendees and attendees can check-in, view other attendees at the event and easily connect with them on Linkedin - all in one place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-homepage.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Homepage for Connect+&lt;/center&gt;

&lt;h2 id=&quot;why-and-what-it-really-is&quot;&gt;Why and What It Really Is&lt;/h2&gt;

&lt;p&gt;Have you ever been to a networking event where you met tons of people, only to forget to connect on LinkedIn or forget to grab business cards or forget their names!? With &lt;strong&gt;Connect+&lt;/strong&gt; you won’t need to worry about forgetting who was at the event! Simply log in with your LinkedIn credentials and enter the secret word given by the host, and you’ll see all the attendees at the same event!&lt;/p&gt;

&lt;p&gt;Haha, so that was our project pitch for why our app is so cool! What do ya think?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-api-call.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Check how cool, our app pulling in profile data from LinkedIn's API!!!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/connect-create-new-event.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of event form. This is how a host creates an event and secret password&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Connect-Review-Event.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of event review, host creates an event, gets a secret code and shares code with attendees!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Connect-screenshot.png&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of the current attendees of the selected event. You can click on their picture and quickly connect on LinkedIn&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We’re very happy how everything turned out, although, the CSS could use a lot of work (we promised that we would reconnect one weekend and style it), the functionality of the app works perfectly. We are definitely proud of this project and really feel like it’s super valuable!! How cool would it be if we got LinkedIn to adopt it!&lt;/p&gt;

&lt;h2 id=&quot;technologies-used&quot;&gt;Technologies Used&lt;/h2&gt;
&lt;p&gt;For the back-end, Connect+ uses a PostgreSQL database. We accessed its Ruby on Rails API through Active Record, to return JSON to the front-end. The front-end is handled by AngularJS. Connect+’s API is hosted on Heroku, and the front-end is on FireBase. The application accesses the LinkedIn API through OAuth 2.0.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Connect+ requires two repositories. The back-end repo can be found at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LWatsonlm/Connect-Backend&quot;&gt;Back-End Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the back-end, install dependencies using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the front-end repo can be accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LWatsonlm/Connect-Frontend&quot;&gt;Front-End Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to install the front-end, please install dependencies using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;view-it-live&quot;&gt;View it live!&lt;/h2&gt;

&lt;p&gt;To view Connect+ live, please visit this link:
&lt;a href=&quot;https://connect-f6bd3.firebaseapp.com/&quot;&gt;View it Live!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-presentation&quot;&gt;The Presentation&lt;/h2&gt;

&lt;p&gt;Each member of the group had to participate in the presentation.&lt;/p&gt;

&lt;p&gt;The presentation should be 10-minutes, with 5 minutes allotted for questions.&lt;/p&gt;

&lt;h2 id=&quot;whew&quot;&gt;Whew!!!&lt;/h2&gt;

&lt;p&gt;What a week!! But it’s only Thursday so let’s get into Friday…&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips--intro-to-express--mongo--mongoose-intro&quot;&gt;Day 5: Slips &amp;amp;&amp;amp; Intro to Express &amp;amp;&amp;amp; Mongo / Mongoose Intro&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;

&lt;p&gt;You remember this, right? Digital flashcards in front of our class. We all take turns standing up in front of the class and answer a random question. One by one… so. much. fun. (can you sense the sarcasm?)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/alipa.png&quot; alt=&quot;Slips&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Slips!&lt;/center&gt;

&lt;h2 id=&quot;intro-to-express-25-hours&quot;&gt;Intro to Express: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Learning Objectives for Express:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List common reasons Javascript is used for server applications&lt;/li&gt;
  &lt;li&gt;Compare and contrast Javascript in the browser vs JS on the server&lt;/li&gt;
  &lt;li&gt;Compare and contrast express.js to Rails / Sinatra.&lt;/li&gt;
  &lt;li&gt;Use npm to manage project dependencies&lt;/li&gt;
  &lt;li&gt;Use module.exports and require to organize code&lt;/li&gt;
  &lt;li&gt;Use Handlebars templates to simplify rendering in express&lt;/li&gt;
  &lt;li&gt;Use and configure middleware, e.g. body-parser to handle form submissions&lt;/li&gt;
  &lt;li&gt;Link to static assets in an Express application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is SO much stuff. We’ve pretty much covered the entire stack. Everything we covered from here on out is an extension of what we’ve already learned or a different language than we’re used to. Today we talked about &lt;strong&gt;expressJS&lt;/strong&gt; the “e” in the MEAN stack. Which incidentally is super buzz-wordy right now. Express is a framework built on top of node.&lt;/p&gt;

&lt;p&gt;So, we &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save express&lt;/code&gt; and spent the class building our views with Handlebars, created forms with body-parser and completed our first Express app! Homework was assigned and campus lunch was served.&lt;/p&gt;

&lt;h2 id=&quot;campus-lunch&quot;&gt;Campus Lunch&lt;/h2&gt;

&lt;p&gt;Every other Friday, General Assembly serves campus lunch. It’s open to any and every student and instructor. It’s literally the best day ever.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161118_122835.jpg&quot; alt=&quot;CAMPUS LUNCH&quot; /&gt;&lt;/p&gt;
&lt;center&gt;FREEEEE LUNCH&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro-to-mongoose-25-hours&quot;&gt;Intro to Mongoose: 2.5 Hours&lt;/h2&gt;

&lt;p&gt;Learning Objectives for Mongoose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differentiate between NoSQL and SQL databases&lt;/li&gt;
  &lt;li&gt;Explain what Mongoose is&lt;/li&gt;
  &lt;li&gt;Describe the role of Mongoose schema and models&lt;/li&gt;
  &lt;li&gt;Use Mongoose to perform CRUD functionality&lt;/li&gt;
  &lt;li&gt;List and describe common Mongoose queries&lt;/li&gt;
  &lt;li&gt;Persist data using Mongoose embedded documents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In previous units, we used ActiveRecord to interact with and perform CRUD actions on a SQL database through a Ruby back-end. Today, we did the equivalent with a tool called Mongoose on a NoSQL database using a Node back-end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;MongoDB&lt;/em&gt;&lt;/strong&gt; is a NoSQL database that stores information as JSON (technically, it’s BJSON – “binary JSON.”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mongoose&lt;/em&gt;&lt;/strong&gt; is an ODM (Object Data Mapping), that allows us to use our data in our application. It also gives additional helpers, functions and queries to easily perform CRUD actions.&lt;/p&gt;

&lt;p&gt;Mongoose provides similar functionality to interact with MongoDB and Express as Active Record did with PostgreSQL and Rails.&lt;/p&gt;

&lt;p&gt;We created Mongoose Schemas, Models, reviewed and practiced Callback Functions, Promises, Created Seed Data, Mongoose Queries and implement CRUD. It has been a long week and this lesson was definitely a tough one.&lt;/p&gt;

&lt;p&gt;I’m beyond exhausted and ready to call it a day. On to happy hour!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161102_220319.jpg&quot; alt=&quot;connect+ screenshot&quot; /&gt;&lt;/p&gt;
&lt;center&gt;My team after a long, hard week!&lt;/center&gt;

&lt;p&gt;Thanks again and see you next week!&lt;/p&gt;
</description>
				<pubDate>Sun, 13 Nov 2016 00:00:00 -0500</pubDate>
				<link>/coding-bootcamp/2016/11/13/week9.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/13/week9.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 8 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Last week was Project 2 week. We’re half way there, with only two more projects to go. Week 8 is the week I really started to feel the burn… there’s a lot of new technologies thrown at us and my brain is exploding with taking it all in.&lt;/p&gt;

&lt;p&gt;This week, we talk APIs, AJAX, Building our own API, Firebase and the introduction to Project 3. &lt;strong&gt;Full warning:&lt;/strong&gt; This is a beefy week so this post is pretty long. Let’s get started!&lt;/p&gt;

&lt;h1 id=&quot;day-1-ui-router--apis--ajax&quot;&gt;Day 1: UI Router &amp;amp;&amp;amp; APIs &amp;amp;&amp;amp; AJAX&lt;/h1&gt;

&lt;p&gt;For today, we dive deeper into technologies that I have zero prior experience on… exciting, but frightening all in one. Did it just get hot in here?&lt;/p&gt;

&lt;h2 id=&quot;ui-router-25-hours&quot;&gt;UI Router: 2.5 hours: &lt;/h2&gt;

&lt;p&gt;Learning Objectives on UI Router:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain what dependency injection is and what problem it solves&lt;/li&gt;
  &lt;li&gt;Explain the purpose of templates in Angular&lt;/li&gt;
  &lt;li&gt;Create separate views and routes for each CRUD action&lt;/li&gt;
  &lt;li&gt;Use the ui-view directive to load angular templates&lt;/li&gt;
  &lt;li&gt;Use $stateProvider and $state to access query parameters and update the URL&lt;/li&gt;
  &lt;li&gt;Define multiple controllers in a single module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, we’ve been using Angular to create some powerful front-end SPAs (Single Page Applications).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/AngularJS.png&quot; alt=&quot;AngularJS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Single Page Applications are Web apps that load a single HTML page and dynamically update that page as the user interacts with the app. SPAs use AJAX and HTML5 to create fluid and responsive web apps, without constant page reloads.&lt;/p&gt;

&lt;p&gt;The beautiful of this is it completely cuts out the reload (that quick white blank screen you see when you click on links) and renders a &lt;strong&gt;state&lt;/strong&gt; instead of reloading. A &lt;strong&gt;state&lt;/strong&gt; in Angular is basically a route: it’s an umbrella term for a URL, the view associated with it, and any controllers used in that view.&lt;/p&gt;

&lt;p&gt;In class, we walk through injecting dependencies and configuring the &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt; for an Angular app, called Stoplight.&lt;/p&gt;

&lt;p&gt;First, we inject the &lt;code class=&quot;highlighter-rouge&quot;&gt;ui.router&lt;/code&gt; dependency in our Angular app:
&lt;code class=&quot;highlighter-rouge&quot;&gt;js
angular.module(&quot;stoplightApp&quot;, [ui.router])
&lt;/code&gt;
From here, we added routes to our config file, defined a state, using &lt;code class=&quot;highlighter-rouge&quot;&gt;$stateProvider&lt;/code&gt; created views that are attached to our controller (one view for one controller) using &lt;code class=&quot;highlighter-rouge&quot;&gt;templateUrl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally, displaying it on the browser using &lt;code class=&quot;highlighter-rouge&quot;&gt;data-ui-view&lt;/code&gt; to render Angular inside HTML.&lt;/p&gt;

&lt;p&gt;Whew. It’s lunch time and I’m definitely reviewing all of this during our two-hour lunch break.&lt;/p&gt;

&lt;h2 id=&quot;apis-and-ajax-25-hours&quot;&gt;APIs and AJAX: 2.5 hours:&lt;/h2&gt;

&lt;p&gt;Back into the beast of unknown territory! Horray! Honestly, I’m feeling the heat but staying optimistic.&lt;/p&gt;

&lt;p&gt;Learning Objectives of APIs and AJAX:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the difference between synchronous and asynchronous program execution&lt;/li&gt;
  &lt;li&gt;Explain why synchronous program execution is not conducive to the front-end.&lt;/li&gt;
  &lt;li&gt;Use jQuery $.ajax() method to make asynchronous GET requests for data.&lt;/li&gt;
  &lt;li&gt;Use jQuery’s ‘promise-like’ methods to handle AJAX responses asynchronously.&lt;/li&gt;
  &lt;li&gt;Render new HTML content using data loaded from an Ajax request.&lt;/li&gt;
  &lt;li&gt;Perform POST, PUT, and DELETE requests to an API to modify data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our first task in class was to open &lt;a href=&quot;https://www.google.com/maps&quot;&gt;Google Maps&lt;/a&gt; and answer the question: what’s happening asynchronously? Spoiler alert: The answer is everything.&lt;/p&gt;

&lt;p&gt;From here, we discussed APIs, Application Program Interfaces, which are commonly known as web data that can be accessed and used for raw data.&lt;/p&gt;

&lt;p&gt;API data comes in two different formats: &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; (Javascript Object Notation) and &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt; (eXensive Markup Language). For this class (and hopefully for life) we focused on JSON.&lt;/p&gt;

&lt;p&gt;JSON looks a little something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and XML looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;users&amp;gt;
  &amp;lt;user id=&quot;23&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[Bob]]&amp;gt;&amp;lt;/name&amp;gt;
  &amp;lt;/user&amp;gt;
  &amp;lt;user id=&quot;72&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[Tim]]&amp;gt;&amp;lt;/name&amp;gt;
  &amp;lt;/user&amp;gt;
&amp;lt;/users&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yeah, my eyes definitely prefer JSON.&lt;/p&gt;

&lt;p&gt;Next in class, we got to play with a couple of different APIs! First, we made GET requests to &lt;a href=&quot;https://api.giphy.com/&quot;&gt;Giphy’s API&lt;/a&gt; and found some cool cat gifs.&lt;/p&gt;

&lt;p&gt;Using $.ajax, a jQuery method:&lt;/p&gt;

&lt;p&gt;We all requested an API key from &lt;a href=&quot;https://www.wunderground.com/weather/api/d/docs&quot;&gt;Weather Underground API&lt;/a&gt; and used &lt;code class=&quot;highlighter-rouge&quot;&gt;$.ajax&lt;/code&gt; (Asynchronous Javascript and XML) to make GET requests to bring in data.&lt;/p&gt;

&lt;p&gt;Here’s an example of what I mean:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Make sure to add the API key to the URL!&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://api.wunderground.com/api/your_key/geolookup/conditions/q/va/midlothian.json&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// $.ajax takes an object as an argument with at least three key-value pairs...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (1) The URL endpoint for the JSON object.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (2) Type of HTTP request.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (3) Datatype. Usually JSON.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ajax request success!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ajax request fails!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This always happens regardless of successful ajax request or not.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With APIs, you can do much more than GET requests… we can create POST, PUT, DELETE, etc requests as well. However, I don’t think Weather API would allow us to modify their data, which means, we’ll have to build our own API instead… And that’s exactly what we did next in class.&lt;/p&gt;

&lt;p&gt;For the last hour of class, we updated our trusty &lt;code class=&quot;highlighter-rouge&quot;&gt;Tunr&lt;/code&gt; app using AJAX and CRUD to create the ultimate &lt;code class=&quot;highlighter-rouge&quot;&gt;Tunr Rails API&lt;/code&gt; app featuring every HTTP request!&lt;/p&gt;

&lt;p&gt;The biggest takeaway from today’s session: APIs are freaking cool AND &lt;strong&gt;It is very important&lt;/strong&gt; that developers do not push API keys to a public Github repo. There’s some pretty scary &lt;a href=&quot;https://wptavern.com/ryan-hellyers-aws-nightmare-leaked-access-keys-result-in-a-6000-bill-overnight&quot;&gt;horror stories out there…&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes--angular-resources&quot;&gt;Day 2: Outcomes &amp;amp;&amp;amp; Angular Resources&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes: 2.5 Hours:&lt;/h2&gt;
&lt;p&gt;Today in Outcomes, we focused on building our online General Assembly Alumni Profile in class. Online Alumni Profiles are the best way for GA’s employment partners to reach students directly regarding new opportunities. This session was dedicated to building our Alumni Profile utilizing our Brand Statement, Resume and Job Search Strategy.&lt;/p&gt;

&lt;p&gt;Feel free to check out my &lt;a href=&quot;https://profiles.generalassemb.ly/lmwatson&quot;&gt;General Assembly Profile&lt;/a&gt; Shoot me and email. I love emails! And I really love emails with potential job opportunities inside of them.&lt;/p&gt;

&lt;h2 id=&quot;angular-resources-25-hours&quot;&gt;Angular Resources: 2.5 Hours:&lt;/h2&gt;

&lt;p&gt;Another big class with so many new things to learn. This lesson focused on a couple of Angular’s Resources: Factories, Services and ngResource.&lt;/p&gt;

&lt;p&gt;Learning Objectives of Angular Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the purpose of Factories in Angular.&lt;/li&gt;
  &lt;li&gt;Use ngResource to pull information from an API.&lt;/li&gt;
  &lt;li&gt;Use $stateParams to access query parameters and update the URL.&lt;/li&gt;
  &lt;li&gt;Create separate views and routes for each CRUD action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the last couple of classes, we used hard coded data to act as our “backend”.  Those days are over and instead, we’ll be connecting to an external API using resources and providing an interface to models using factories.&lt;/p&gt;

&lt;p&gt;We start by cloning down a repo with a Rails API. Our front-end in-class application will make AJAX calls to that API. First, we convert the hardcoded data to read from an external API using a Factory.&lt;/p&gt;

&lt;p&gt;A Factory is an Angular Component that generates new instances of something.&lt;/p&gt;

&lt;p&gt;For this in class assignment, we were told not code along. Btw, I’m REALLY bad at not coding along… It feels unnatural to sit and watch when there’s coding to be done!&lt;/p&gt;

&lt;p&gt;We watched as our instructor walked through each step building a CRUD  (create, read, update, delete) application. Between each step, we were given 10-15 mins to complete the CRUD step locally. Going back and forth between watching and doing, we completed creating RESTful routes and using a Factory to query our API.&lt;/p&gt;

&lt;p&gt;Homework was assigned and I’m feeling overwhelmed on a Tuesday.&lt;/p&gt;

&lt;h1 id=&quot;day-3-apis-api--firebase&quot;&gt;Day 3: APIs API &amp;amp;&amp;amp; FireBase&lt;/h1&gt;

&lt;p&gt;I spent 4 extra hours at school yesterday due to wrapping my head around our homework assignment on Angular Resources, Factories, and AJAX calls. Feeling a bit tired today but excited because we’re building our own API and getting closer to Project 3!&lt;/p&gt;

&lt;h2 id=&quot;apis-25-hours&quot;&gt;APIs: 2.5 Hours:&lt;/h2&gt;

&lt;p&gt;So, we have used third-party APIs and we have used our instructor’s custom built API… now it’s time we learn how to create our OWN API from the ground up! This will serve up JSON and render HTML views.&lt;/p&gt;

&lt;p&gt;Learning Objectives of APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Describe what an API is, and why we might use one.&lt;/li&gt;
  &lt;li&gt;Describe the purpose and syntax of respond_to&lt;/li&gt;
  &lt;li&gt;Make a Rails app that provides a JSON API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We start off the class with an API Exploration. Taking about 10 mins, we searched some popular APIs and discussed our opinions on them.&lt;/p&gt;

&lt;p&gt;Next, we make a couple of basic HTTP requests to an API, using &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/postman.png&quot; alt=&quot;Postman&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Closer Look at an API Request&lt;/center&gt;

&lt;p&gt;After poking around with that, we dive into the meat of the lesson, building a Rails API to serve JSON.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We spend the rest of the morning rendering json and feeling super proud of our custom API. Lunch time.&lt;/p&gt;

&lt;h2 id=&quot;firebaseangularfire-25-hours&quot;&gt;FireBase/AngularFire: 2.5 Hours:&lt;/h2&gt;

&lt;p&gt;Up until this point, we’ve used Postgres and SQL to persist data. Today we explored an alternative: Firebase.&lt;/p&gt;

&lt;p&gt;What Is Firebase?&lt;/p&gt;

&lt;p&gt;Firebase is a PaaS, or “Platform as a Service.” That means it offers a number of cloud-based computing services, including the one that matters to us today: a realtime database. Not only can we access a Firebase DB programmatically using code, but we can also interact with data via a graphical interface in the browser.&lt;/p&gt;

&lt;p&gt;Unlike Postgres, Firebase is a NoSQL database. This means that information is not stored in tables and it does not make use of associations like &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt;. Instead, information in a NoSQL database is stored in one big JSON tree.&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of my database in Firebase:
&lt;img src=&quot;/img/firebase.png&quot; alt=&quot;Firebase&quot; /&gt;&lt;/p&gt;
&lt;center&gt;A Closer Look at an API Request&lt;/center&gt;

&lt;p&gt;One way to connect an Angular application to a Firebase DB is AngularFire.&lt;/p&gt;

&lt;p&gt;We spent the rest of class building the classic, TODO app, using Firebase DB to persist data.&lt;/p&gt;

&lt;p&gt;No new homework tonight but homework is due tomorrow at 9am so I stayed at school to complete my assignments.&lt;/p&gt;

&lt;h1 id=&quot;day-4-lab&quot;&gt;Day 4: Lab!!!&lt;/h1&gt;

&lt;p&gt;Homework is all turned in and now it’s time for a lab day.&lt;/p&gt;

&lt;p&gt;Oh, lab day. You always come at the right time. Feeling overwhelmed, lab day is such a blessing. It’s time to sit down, break some code, and bring the week all together.&lt;/p&gt;

&lt;p&gt;Today’s lab is pretty cool, too. We’re building a WDI Radio. This radio has Artist data, as well as their Songs, it should serve JSON and hosted with Firebase DB.&lt;/p&gt;

&lt;p&gt;This was a fun lab that really helped me understand the power of Firebase.&lt;/p&gt;

&lt;p&gt;We ended out the day with submitting up to 5 names of students that we would want to be in a group with. Honestly, I didn’t really like this format of picking groups… It just feels so exclusive. But I submitted my suggestions and (im)patiently waited for group announcements on Friday.&lt;/p&gt;

&lt;h1 id=&quot;day-5-project-3---group-project&quot;&gt;Day 5: PROJECT 3 - Group Project!&lt;/h1&gt;

&lt;p&gt;After, what felt like the longest week ever, Friday is here and so is Project 3… our first and only group project!&lt;/p&gt;

&lt;p&gt;Everyone in class has been very anxious to see who is in who’s group. And drumroll, please…………….  I was put into an AWESOME group of two other rockstar classmates. Yeah! This is going to be great.&lt;/p&gt;

&lt;p&gt;Whoaaa. That was a long week and a long read. Thanks for sticking with me until the end and make sure to check out next week to see how our group project turned out!&lt;/p&gt;

&lt;p&gt;Until Then!&lt;/p&gt;
</description>
				<pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/11/06/week8.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/11/06/week8.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 7 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Project 2 has come and gone. It was a week full of many lessons learned and victory dances. Let’s get to it.&lt;/p&gt;

&lt;h1 id=&quot;project-2-building-our-first-full-stack-app&quot;&gt;Project 2: Building our First Full-Stack App:&lt;/h1&gt;

&lt;h2 id=&quot;lets-review-the-technical-requirements&quot;&gt;Let’s review the Technical Requirements&lt;/h2&gt;

&lt;p&gt;The app must…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be built in Rails.&lt;/li&gt;
  &lt;li&gt;Have at least 2 models with at least 1 association (more if it makes sense).&lt;/li&gt;
  &lt;li&gt;Have complete RESTful routes for at least one of your resources with GET, POST, PUT, and DELETE.&lt;/li&gt;
  &lt;li&gt;Have error handling &amp;amp; validations for all resources&lt;/li&gt;
  &lt;li&gt;Utilize an ORM to create a database table structure (e.g. ActiveRecord) and interact with your relationally-stored data.&lt;/li&gt;
  &lt;li&gt;Have semantically-clean HTML and CSS that passes the standard validators.&lt;/li&gt;
  &lt;li&gt;Record and publish a video on Youtube describing your process, showing off your code, and speaking about things you’ll like to add to your app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-did-i-do&quot;&gt;What did I do?&lt;/h2&gt;
&lt;p&gt;Have you ever had a random idea, thought or just a question you wanted to throw out into the world and get real-time feedback on?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/idea.ly-homepage.png&quot; alt=&quot;ideal.ly&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Introducing... ideal.ly!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I built a fully functional CRUD full-stack app with user authentication and permissions. Rails on the front end, ActiveRecord as my ORM, and Postgres for my database. For this project, I wanted to focus on writing clean, easy to follow, and DRY code. DRY = Don’t Repeat Yourself.&lt;/p&gt;

&lt;p&gt;I challenged myself to implement Ruby gems not taught in class so I could practice reading other developer’s documentation. I installed and played around with a hand full of gems but unfortunately, I found out that not all gems are created equal.&lt;/p&gt;

&lt;p&gt;I was able to find a neat gem called &lt;a href=&quot;https://github.com/ryanto/acts_as_votable&quot;&gt;Acts As Votable.&lt;/a&gt; This gem allows users to upvote and downvote their own and other user’s ideas. An user can only vote once per vote.&lt;/p&gt;

&lt;p&gt;I’m very proud of keeping true to my goal and delivering DRY code. I used partials and helpers in my application that helped keep my files neat, readable and easy for other developers to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ideal.ly-res.png&quot; alt=&quot;idea.ly&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot 1 &lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;/img/idea.ly.png&quot; alt=&quot;idea.ly&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot 2&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;/img/idealy.png&quot; alt=&quot;idea.ly&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot 3&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;/img/idealy2.png&quot; alt=&quot;idea.ly&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshots of my project 2: idea.ly&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I’m pretty darn proud of my project 2. I enjoyed learning more about Rails, ActiveRecord and Postgres. I now have my first full stack application where users can log in/out, leave the site and data will persistent within my database.  It’s definitely worth a pat on the back.&lt;/p&gt;

&lt;p&gt;Once the project was done, I took 1 hour to record my presentation using QuickTime. With QuickTime, you can easily record whatever is on your computer screen. For recording your screen, I highly recommend grabbing headphones and using QuickTime!&lt;/p&gt;

&lt;p&gt;Moving on, as promised here are my project 2 links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eYL_NMl8m00&amp;amp;feature=youtu.be&quot;&gt;Youtube link&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/LWatsonlm/idea.ly&quot;&gt;Github link&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://fathomless-bayou-24323.herokuapp.com/&quot;&gt;Live Demo&lt;/a&gt; - Remember this is public so if you use it, anyone can see anything you post!&lt;/p&gt;

&lt;h1 id=&quot;day-5-intro-to-angular--campus-lunch--student-surprise&quot;&gt;Day 5: Intro to Angular &amp;amp;&amp;amp; Campus Lunch &amp;amp;&amp;amp; Student Surprise!&lt;/h1&gt;

&lt;p&gt;No time off. Right back to learning new material the day after project submission. Today is a special day because today we are stepping into the A of the MEAN stack. Angularjs.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-angular&quot;&gt;Intro to Angular&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/angular.gif&quot; alt=&quot;gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am super pumped to start moving into the MEAN stack and learn a brand new front end framework called Angularjs. Today in class, we’re building a classic application… a Todo App.&lt;/p&gt;

&lt;p&gt;We bootstrapped our Angular app, learned how to use Angular directives such as ‘ng-app, ng-repeat, ng-model, ng-click, ng-show and ng-hide’ and walked through coding a Todo App in class.&lt;/p&gt;

&lt;h2 id=&quot;campus-lunch&quot;&gt;Campus Lunch&lt;/h2&gt;

&lt;p&gt;Every other Friday, General Assembly provides catered lunch for the whole campus. This is clearly one of the best perks and a highly anticipated one. Obviously, free lunch taste better and it’s a lot of fun hanging and eating with my classmates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161014_120806.jpg&quot; alt=&quot;lunch&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Campus Lunch: Every other Friday&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;surprise&quot;&gt;Surprise!&lt;/h2&gt;

&lt;p&gt;Project 2 is done and we have two more projects to go! We’re right at the midpoint of our adventure and because of this rite of passage we were rewarded our official WDI General Assembly zip up hoodie! Yes, now we are a free walking marketing board for GA! Haha, I see right through General Assembly but hey, it’s cool to represent! These hoodies are not available to the public and only full time students receive them so yeah, it’s pretty special.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161127_182955.jpg&quot; alt=&quot;ga hoodie&quot; /&gt;
&lt;img src=&quot;/img/IMG_20161127_183039.jpg&quot; alt=&quot;ga hoodie&quot; /&gt;
&lt;img src=&quot;/img/IMG_20161127_183036.jpg&quot; alt=&quot;ga hoodie&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Rite of Passage: WDI Hoodie&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lab-and-happy-hour&quot;&gt;Lab and Happy Hour&lt;/h2&gt;

&lt;p&gt;To wrap up this full week, we were given a lab to solidify the Angular lesson taught earlier today. The theme of the lab: Superhero Phonebook.&lt;/p&gt;

&lt;p&gt;Using Angular, build a superhero phonebook using directives, add a button next to each superhero that, when clicked, causes the hero’s image to be displayed on the page. Also, this phonebook should have search capabilities where you can easily type a term and the phonebook responds accordingly. Really fun stuff that definitely gave me a better understanding of Angular.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/angularjs.jpg&quot; alt=&quot;angular&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What a week! Time to wrap up and head to Happy Hour. Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 30 Oct 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/10/30/week7.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/10/30/week7.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 6 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Last week, we started Ruby and Rails, this week we’re diving deeper into Rails and we hit a big milestone… the start of Project 2! Let’s get going.&lt;/p&gt;

&lt;h1 id=&quot;day-1-checkpoint-rails-review--two-labs&quot;&gt;Day 1: Checkpoint, Rails Review || two Labs:&lt;/h1&gt;
&lt;p&gt;We started off the day with a Checkpoint. Remember, Checkpoints are informal quizzes that help check yourself on where you’re at in the material.&lt;/p&gt;

&lt;h2 id=&quot;morning-rails-review-or-lab---25-hours&quot;&gt;Morning Rails Review or Lab - 2.5 hours:&lt;/h2&gt;
&lt;p&gt;After the Checkpoint, we were given two options: Rails Review with our instructor or a pair programming lab. I always love a good review session so I opted to review. Most of the class picked this option, making the review session upbeat and very informational.&lt;/p&gt;

&lt;h2 id=&quot;afternoon-lab-hogwarts---25-hours&quot;&gt;Afternoon Lab: Hogwarts - 2.5 hours:&lt;/h2&gt;
&lt;p&gt;If you read previous weeks, you’ll know that I love labs! Lab day is my time to really dig into the code, break things, fix things, ask questions and feel proud when it’s all said and done.&lt;/p&gt;

&lt;p&gt;One of my favorite things about GA is that our labs/homework are designed around pop culture themes such as Harry Potter, Game of Thrones, Pokemon, etc. Today we built a full CRUD app with nested resources and RESTful paths in Rails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/hogwarts.png&quot; alt=&quot;lab&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of my Rails lab&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We ended the day at 5pm, with instructor’s office hours from 6-8pm.&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes--rails-users-session--flash&quot;&gt;Day 2: Outcomes &amp;amp;&amp;amp; Rails: Users, Session &amp;amp; Flash:&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes: 2.5 Hours:&lt;/h2&gt;
&lt;p&gt;In previous weeks, I realized I didn’t talk too much about Outcomes so I’m going to try to do a better job at explaining what happens every Tuesday morning.&lt;/p&gt;

&lt;p&gt;Every Tuesday, we have an full hour from 9am-10am to prep for Outcomes. We aren’t in the classroom during this time. Mostly the class hangs out and chats about new job postings, resumes and portfolio ideas.&lt;/p&gt;

&lt;p&gt;In class, we workshopped how to narrow down our job search strategy, what’s the must-haves versus nice-to-haves and how to get what we want in our next career. Lastly, we took professional head shots from a professional photographer.&lt;/p&gt;

&lt;h2 id=&quot;rails-users-session--flash---25-hours&quot;&gt;Rails: Users, Session &amp;amp; Flash - 2.5 Hours:&lt;/h2&gt;
&lt;p&gt;Last week in class, we built our first Rails app, called Tunr. Tunr is a small CRUD app that lets you view artists and listen to snippets of their songs. It’s pretty cool.&lt;/p&gt;

&lt;p&gt;In this lesson, we added a big feature to our Tunr app: User authentication. By that I mean the ability for a user to sign up, sign in and sign out of an application. This a big feature because up until this point, all of our applications have had one single user.&lt;/p&gt;

&lt;p&gt;This was a heavy class so it was broken down into three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Adding Sessions: 40 mins
A crucial part to any website that lets users log on or off. Without sessions Amazon’s shopping carts wouldn’t be able to hold our stuff after every page refresh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add Permissions: 30 mins
Now that users can log in and out, permissions are rules for the users to what they can and cannot do while login. Such as an user should only be able to modify their own email/password.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adding Flash: 30 mins
Flash is a built in feature of Rails that we use to display errors messages or alerts on the browser for users.
This class was hands on and code heavy. Which makes for a great class. Felt really good about today.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-3-devise--rails-many-to-many&quot;&gt;Day 3: Devise &amp;amp;&amp;amp; Rails Many-to-Many&lt;/h1&gt;

&lt;h2 id=&quot;devise---25-hours&quot;&gt;Devise - 2.5 Hours:&lt;/h2&gt;
&lt;p&gt;Yesterday, we spent a lot of time adding users, permissions and updating flash messages. Today, we learned of a cool little gem called Devise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devise.png&quot; alt=&quot;devise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Devise is a gem that simplifies implementing user authentication. Literally, it simplifies the implementation of users all in one gem. I highly recommend it for quickly getting users up and running… &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Read more about Devise.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We spent the class installing devise, linking up our sign in pages, limiting user abilities, and customizing devise’s views.&lt;/p&gt;

&lt;h2 id=&quot;rails-many-to-many---25-hours&quot;&gt;Rails Many-to-Many - 2.5 Hours:&lt;/h2&gt;
&lt;p&gt;Previously, we created our Rails app with one-to-one and one-to-many relationships. This class, we went beyond that and ventured into many-to-many relationships.&lt;/p&gt;

&lt;p&gt;Simply put, a many-to-many relationship means there’s records that have more than one relationship in one table with a record in another table. Many-to-many applications are pretty common in web applications… and in life! For example, theaters can show many movies and movies are shown in many theaters. And unlike one-to-many, we can’t simply add a foreign key… we actually need to create a separate table called a ‘join table’.&lt;/p&gt;

&lt;p&gt;We spent the class adding a new model called Favorites to our Tunr app. By updating the controller, view and routes, our users can now have favorite songs on many different songs. A pretty awesome feature.&lt;/p&gt;

&lt;p&gt;Homework is due tomorrow by 9am (per usual). It may be helpful noting that Wednesdays are the days more than half my classmates stay behind and work on homework. Although homework is posted in our calendar a week before, the lessons taught on Wednesdays usually bring the assignment all together… so there’s some strategy in our procrastination! ;)&lt;/p&gt;

&lt;h1 id=&quot;day-4-full-lab-day&quot;&gt;Day 4: Full Lab Day&lt;/h1&gt;
&lt;p&gt;After waking up entirely too early, I realized that I work much better staying up late rather than waking up early to get the homework in by 9am. My biggest advice is to figure out what works for you as soon as possible. I’m definitely hitting the coffee hard today.&lt;/p&gt;

&lt;h2 id=&quot;game-of-thrones-all-day-lab&quot;&gt;Game of Thrones: All Day Lab&lt;/h2&gt;
&lt;p&gt;Good thing it’s lab day! Another fun theme from our instructors - Houses of Westeros. The assignment is build a Rails app with two models: Houses and Characters, creating migrations and seed our data to our database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/GoT.jpg&quot; alt=&quot;GoT&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Game of Thrones Lab: Houses of Westeros&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I had a lot of trouble with my lab. Unfortunately, creating the schema, migrating, seeding and connecting relationships between my two models gave me tons of trouble. However, along with all the problems, came a lot of ‘a-ha’ moments. The ‘a-ha’ moments are the moments you’ll carry with you through out your career.&lt;/p&gt;

&lt;p&gt;I completed my lab, submitted before 5pm, and although I had many problems, I learned a lot and I still feel optimistic about Rails.&lt;/p&gt;

&lt;h1 id=&quot;day-5-project-2-building-our-first-full-stack-application&quot;&gt;Day 5: Project 2: Building Our First Full-stack Application&lt;/h1&gt;
&lt;p&gt;Omgz, you guys! It’s here. Project 2 is here. Can you guess what Project 2 is all about? If you said Rails, ding ding ding, you are CORRECT!&lt;/p&gt;

&lt;h3 id=&quot;technical-requirements&quot;&gt;Technical Requirements:&lt;/h3&gt;
&lt;p&gt;The app must…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be built in Rails.&lt;/li&gt;
  &lt;li&gt;Have at least 2 models with at least 1 association (more if it makes sense).&lt;/li&gt;
  &lt;li&gt;Have complete RESTful routes for at least one of your resources with GET, POST, PUT, and DELETE.&lt;/li&gt;
  &lt;li&gt;Have error handling &amp;amp; validations for all resources&lt;/li&gt;
  &lt;li&gt;Utilize an ORM to create a database table structure (e.g. ActiveRecord) and interact with your relationally-stored data.&lt;/li&gt;
  &lt;li&gt;Have semantically-clean HTML and CSS that passes the standard validators.&lt;/li&gt;
  &lt;li&gt;Record and publish a video on Youtube describing your process, showing off your code, and speaking about things you’ll like to add to your app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We have until no later than next Thursday at 2pm to complete our project and its deliverables. Open office hours will be available every day from 10am-12:30pm and from 6-8pm. However, this time, our instructors are making us leave the nest a bit… we must submit a Github Issue for any assistance outside of open office hours!&lt;/p&gt;

&lt;p&gt;Whew. Next week is project week where I’ll share my Youtube video, Github link and project picture gallery with you all. Happy Coding!&lt;/p&gt;
</description>
				<pubDate>Sun, 23 Oct 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/10/23/week6.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/10/23/week6.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 5 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;Hey, hey, hey! Welcome back, I’m happy you decided to join us again. Last week, I hit the bottom of the emotional cycle of change. It’s a scary place down here but I don’t intend to stay for much longer. Let’s dive in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/graph.jpeg&quot; alt=&quot;The emotional cycle of change&quot; /&gt;&lt;/p&gt;
&lt;center&gt;The Emotional Cycle of Change&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-1-sinatra--rest&quot;&gt;Day 1: Sinatra &amp;amp; REST&lt;/h1&gt;

&lt;p&gt;So, we’ve been building Ruby apps in the Command Line and collecting data in Postgres but how in the world do we bring our apps to the browser? Enter, Sinatra.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sinatra.jpeg&quot; alt=&quot;Sinatra&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Well, maybe not that Sinatra.&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Sinatra is a framework for quickly creating web applications in Ruby with minimal effort. Other ways include Rails, Express / Node.js, Django, PHP, etc.&lt;/p&gt;

&lt;p&gt;Sinatra isn’t nearly as popular for a Ruby framework as Rails, but has a use case when building smaller scale apps because it’s minimalistic and lightweight as opposed to the “heaviness” of Rails, which is more apt for a larger production site.&lt;/p&gt;

&lt;p&gt;So, we spent the first hour building our first Sinatra app together as a class. And the last hour building our own app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sinatra puns.png&quot; alt=&quot;Sinatra Puns&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Sinatra is full of puns. Makes for a good time!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rest-25-hours&quot;&gt;REST: 2.5 hours:&lt;/h2&gt;
&lt;p&gt;Browsers have different “ways of talking” to servers. These are called methods. REST, or REpresentational State Transfer, is a convention for what these methods should be to standardize all the communication between browsers and servers.&lt;/p&gt;

&lt;p&gt;Knowing REST is important because the vast majority of web developers have agreed to follow this same convention.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-10-31_0038.png&quot; alt=&quot;RESTful&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We spent a good chunk of the day building our CRUD and RESTful paths functionality into our Sinatra app. Most of the lesson we followed along with the instructor. Next, we were given a different project to build while applying what we’ve learn into our local app.&lt;/p&gt;

&lt;p&gt;Feeling good about the day, I left school right after class, feeling optimistic once again!&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 4
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes-sinatra-and-activerecord&quot;&gt;Day 2: Outcomes, Sinatra and ActiveRecord&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-15-hours&quot;&gt;Outcomes: 1.5 Hours&lt;/h2&gt;
&lt;p&gt;On Tuesday mornings we meet with Outcomes. Outcomes assist students with the ‘after life’ of General Assembly. This week we went on a studio tour to iStrategy Labs to get an insider look into the life of a web developer. It was great to get away from campus and network with folks in my industry.&lt;/p&gt;

&lt;h2 id=&quot;sinatra-and-activerecord-25-hours&quot;&gt;Sinatra and ActiveRecord: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;After our tour and lunch, we headed back into the classroom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20161007_153244.jpg&quot; alt=&quot;back in class&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Back at it!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Sinatra helps us build simple web applications quickly. We do not, however, have any way to persist data. ActiveRecord, on the other hand, lets us store data in a database easily but has no native web interface - only the command line. Put the two together, and we can build an app with a web interface that is backed by a database.&lt;/p&gt;

&lt;p&gt;We spent the rest of the afternoon walking through building out a full CRUD Tunr app using Sinatra and ActiveRecord. A quick run down of this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sketch out our ERD diagram&lt;/li&gt;
  &lt;li&gt;Define our Schema&lt;/li&gt;
  &lt;li&gt;Setup app.rb to load files using require and require_relative&lt;/li&gt;
  &lt;li&gt;Made our Views - index, show, new views using .erb (embedded ruby file)&lt;/li&gt;
  &lt;li&gt;Created forms for entering and editing data&lt;/li&gt;
  &lt;li&gt;Deployed full CRUD!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-3-all-day-sinatra-lab&quot;&gt;Day 3: All Day Sinatra Lab&lt;/h1&gt;

&lt;p&gt;Pokenatra was the name of the lab and I knew it was going to be a good day. I’m a bit obsessed with Pokemon and this lab was all about creating a fully functional CRUD on a Pokemon model (i.e., you can read, create, update and delete a Pokemon). It was basically creating my own Pokedex. You can check out my poke github, if interested.&lt;/p&gt;

&lt;p&gt;Writing code is definitely easier when you’re really into the topic. That was my biggest takeaway from this lab. I’m keeping that top of mind for industry searching on job market.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;day-4-intro-to-rails--models-and-migrations&quot;&gt;Day 4: Intro to Rails &amp;amp;&amp;amp; Models and Migrations&lt;/h1&gt;

&lt;h2 id=&quot;checkpoint-1-hour&quot;&gt;Checkpoint: 1 hour&lt;/h2&gt;
&lt;p&gt;We had a quiz/checkpoint the very beginning of the day. All quizzes happen right at 9am and we have a hour to complete the quiz. It’s open note/open Google so it’s not your typical quiz - this is mostly for yourself to see how comfortable you are with the material.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-railsmvc-15-hours&quot;&gt;Intro to Rails/MVC: 1.5 Hours&lt;/h2&gt;
&lt;p&gt;Yes. We have arrived. It’s finally the moment I’ve been waiting for… Ruby on Rails. Or just Rails. Apparently, you sound like a n00b if you say the full name. Anyway, Rails is a web application development framework written in the Ruby language.&lt;/p&gt;

&lt;p&gt;Rails follows the MVC pattern. MVC is all about separating your code into separate sections…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Models: they represent the data in our application and handle “business logic” using model methods&lt;/li&gt;
  &lt;li&gt;Views: they describe how to present your data in a way that the user can see in the browser&lt;/li&gt;
  &lt;li&gt;Controllers: they are responsible for responding to user requests, interacting with models and loading views&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And because Rails is for web apps, there’s one additional component it adds to MVC: a router.  Take a look at this picture below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/MVC rails.png&quot; alt=&quot;MVC rails&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Rails rMVC Diagram&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
The rest of the class was setting up our first Rails app! Very exciting times. Check this lovely confirmation page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/yay-rails.png&quot; alt=&quot;rails&quot; /&gt;&lt;/p&gt;
&lt;center&gt;The confirmation page after connecting to Rails&lt;/center&gt;

&lt;p&gt;Speaking of confirmation pages, one of the best features of Rails is its error pages! Crazy, right? Rails provides detailed, understandable errors that provide guidance when building an application. The error pages even come with a command line at the bottom for easy debugging!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails error no route.png&quot; alt=&quot;routing error&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Error page from Rails - No route!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Love it.&lt;/p&gt;

&lt;p&gt;Speaking of error messages, our instructors let us in on a little secret that was too good not to tweet..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails-tweet.png&quot; alt=&quot;rails tweet&quot; /&gt;&lt;/p&gt;
&lt;center&gt;The secret... co-signed by my classmate, Nick Oki!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rails-models-and-migrations-25-hours&quot;&gt;Rails Models and Migrations: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;Mostly in this class, we followed the instructors along while we created our Models and Migrations into our Rails app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails migration.png&quot; alt=&quot;rails migration&quot; /&gt;&lt;/p&gt;
&lt;center&gt;How to rename a column using a migration&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Because we mostly created migrations to fix common errors in rails, not much else to say for this class!&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;day-5-slips-rails-views-and-controllers--rails-routing-and-resources&quot;&gt;Day 5: Slips, Rails Views and Controllers &amp;amp;&amp;amp; Rails Routing and Resources&lt;/h1&gt;

&lt;h2 id=&quot;slips-1-hour&quot;&gt;Slips: 1 Hour&lt;/h2&gt;
&lt;p&gt;Digital flashcards. This time we broke into small groups of 4 and individually answered questions. I’m still on the fence to whether or not I like this format better. The hour feels longer because you’re answering more questions but on the other hand, you aren’t standing up in front of the entire class.&lt;/p&gt;

&lt;h2 id=&quot;views-and-controllers-15-hours&quot;&gt;Views and Controllers: 1.5 Hours&lt;/h2&gt;
&lt;p&gt;In this class, we built out our Rails Controllers and it’s associated Views using .erb and .rb files. The learning objectives of this class was as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain how the router directs requests to a specific controller and action&lt;/li&gt;
  &lt;li&gt;Explain how controller actions map to specific views&lt;/li&gt;
  &lt;li&gt;Describe the role of instance variables in sharing information between an action and its view&lt;/li&gt;
  &lt;li&gt;Describe the Rails convention for implicitly rendering a view from an action&lt;/li&gt;
  &lt;li&gt;Differentiate between redirect and render&lt;/li&gt;
  &lt;li&gt;Use strong_params to limit what attributes can be modified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
By the end of this class, we built our first full rails CRUD app! Homework was assigned and we were on our way to lunch.&lt;/p&gt;

&lt;h2 id=&quot;rails-routing-and-resources-25-hours&quot;&gt;Rails Routing and Resources: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;This was another class that we mostly followed along with the instructor and coded with a partner. We chatted a lot about a rails developer’s best friend: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails routes&lt;/code&gt; command. The simple CLI line that gives you back so much more:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rails routes.png&quot; alt=&quot;rails routes&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Introducing: the ever most helpful 'rails routes' command!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We finished out the lesson coding our RESTful Routes, and lastly, created Nested Resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/nested rails routes.png&quot; alt=&quot;nested rails routes&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Nested Resources changes up 'rails routes' quite a bit!&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Alright! Another solid week in the books. I really enjoyed this week and I’m feel right back at the top of my emotional cycle. Whew! Feels good to be back.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;p&gt;Thanks again for reading! General Assembly’s (free) Happy Hour is calling… Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 16 Oct 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/10/16/week5.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/10/16/week5.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 4 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;HI! I’m glad you decided to join us again. Last week, I spent many hours on my first project, a Hangman game using JavaScript and jQuery. It was a blast and I was ready to learn more.
Luckily, that’s just what happened… let’s get started!&lt;/p&gt;

&lt;h1 id=&quot;day-1-intro-to-ruby&quot;&gt;Day 1: Intro to Ruby&lt;/h1&gt;

&lt;p&gt;Ruby is a familiar term to me - I knew it was a programming language and I’ve played around with a super fun &lt;a href=&quot;http://tryruby.org/levels/1/challenges/0&quot;&gt;Ruby Tutorial&lt;/a&gt; before so I was pumped to officially learn Ruby. What’s Ruby, you ask? Well, Ruby is an open-source server side programming language that focus on simplicity and productivity. The moment we started learning Ruby, I knew it was a language I wanted in my toolkit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ruby.jpg&quot; alt=&quot;ruby jokes&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Ruby jokes... ha ha ha&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intro-to-ruby-15-hours&quot;&gt;Intro to Ruby: 1.5 hours&lt;/h2&gt;
&lt;p&gt;For our intro into Ruby, we chatted a lot about the history, the creator of Ruby, and we compared and contrasted Ruby and Javascript as programming languages. My favorite difference is how natural Ruby feels compare to Javascript.&lt;/p&gt;

&lt;center&gt;&quot;Ruby is simple in appearance, but is very complex inside, just like our human body.&quot; — Yukihiro &quot;Matz&quot; Matsumoto&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Quick note: If you’re curious, check out the &lt;a href=&quot;https://www.ruby-lang.org/en/about/&quot;&gt;history of Ruby and it’s creator, Matz.&lt;/a&gt; The really fascinating!&lt;/p&gt;

&lt;p&gt;In class, we installed Ruby and PRY ( we use PRY to run ruby in a REPL, read, evaluate, print, loop) from here, we learned about data types, arrays, hashes and methods.&lt;/p&gt;

&lt;h2 id=&quot;ruby-enums-25-hours&quot;&gt;Ruby Enums: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;After our lunch/break/open office time with the instructors (reminder: we have a break from 12:30 - 2:30pm everyday) we dived into Ruby Enumerables!&lt;/p&gt;

&lt;p&gt;What is an enumerable?
In Javascript, if we wanted to print a list of items inside an array, we would write a for or while loop. In Ruby, we can use enumeables! Enumerables are loops used specifically to do something to or with each item in an collection. We learned about the .each and .map enumerables.&lt;/p&gt;

&lt;p&gt;We spent a lot of time doing class exercises using our new found Ruby skills.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 4
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;day-2-outcomes-and-ruby-lab&quot;&gt;Day 2: Outcomes and Ruby Lab&lt;/h1&gt;

&lt;h2 id=&quot;outcomes-25-hours&quot;&gt;Outcomes: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;Every Tuesday we meet with the Outcomes team from 10am - 12:30pm. Outcomes is a time to discuss resume building, interview prep, defining our personal brand, Linkedin profile building, and peer reviewing of all things professional.&lt;/p&gt;

&lt;h2 id=&quot;ruby-lab-25-hours&quot;&gt;Ruby Lab: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;We were given a lab to complete before 5pm. The lab relied heavily upon Ruby Enums and boy, was it challenging. This was one of the first labs that I felt unsure about. Usually, labs are all day but not today. The instructors helped out a lot and I finish the lab but I didn’t go home feeling too hot.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 2.5
Optimistic level: Meh…&lt;/p&gt;

&lt;h1 id=&quot;day-3-intro-to-object-oriented-programming-in-ruby&quot;&gt;Day 3: Intro to Object-Oriented Programming in Ruby&lt;/h1&gt;

&lt;p&gt;Yesterday was rough on me so I spent majority of last night reviewing Ruby. It’s difficult to really like something that you barely understand… I feel like Ruby is a language that I can really geek out on but unfortunately I’m not there just yet. Today, we dived deeper into Ruby as a OOP language.&lt;/p&gt;

&lt;h2 id=&quot;ruby-intro-to-oop-1-25-hours&quot;&gt;Ruby Intro to OOP 1: 2.5 hours&lt;/h2&gt;
&lt;p&gt;Ruby is an object-oriented language. An object is a collection of related attributes (aka properties) and methods (aka behavior). Think of an object as a little machine: it has displays you can read and buttons you can push.&lt;/p&gt;

&lt;p&gt;We created our first Object in class, using class and instances and walked through the relationship between .new() and def initialize().&lt;/p&gt;

&lt;h2 id=&quot;ruby-intermediate-oop-in-ruby-25-hours&quot;&gt;Ruby Intermediate OOP in Ruby: 2.5 Hours&lt;/h2&gt;
&lt;p&gt;More OOP practice - we spent about a hour building a Person Class using variables, instances and inheritance. Just like we get traits from our parents, we can use a feature called inheritance to create multiple classes (children) that share properties and methods from their parents.&lt;/p&gt;

&lt;p&gt;We ended the day with review and a sneak peek into Ruby on Rails… Exciting stuff but still feeling a bit shaky on everything. Today was packed with tons of new vocab and there’s 3 homework assignments due tomorrow at 9am. Today quickly became a 12 hour day, as I stayed at school to study and finish homework assignments until 9pm.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 3
Optimistic level: Meh… there was a lot of material today.&lt;/p&gt;

&lt;h1 id=&quot;day-4-ruby-lab&quot;&gt;Day 4: Ruby Lab&lt;/h1&gt;

&lt;p&gt;Can I start off by saying that lab days are my favorite days of the week! Why, you ask? A lot of different reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No class!! Finally a chance to catch up and solidify everything learned from the week&lt;/li&gt;
  &lt;li&gt;You can work from anywhere. I usually stay on campus but sometimes I’ll take my lab over to the nearest coffee shop&lt;/li&gt;
  &lt;li&gt;Instructors are available majority of the day to answer any questions. There’s plenty of opportunity for one on one assistance&lt;/li&gt;
  &lt;li&gt;I learn by doing. The lab is the time to try things, fail at those things, make mistakes and learn as much as possible within the day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
It’s been a rough week for me so this lab was much needed. We were given a choice to what lab to tackle (ranked by difficulty. All to be built in the command line):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Flash Cards&lt;/li&gt;
  &lt;li&gt;Personal Finance&lt;/li&gt;
  &lt;li&gt;Battleship&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
Even though I had a rough week, I still wanted a challenge so I picked Personal Finance. Although, the subject was pretty boring, I successfully completed the project and felt great about my progress through a bumpy time.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 4
Optimistic level: Much better!&lt;/p&gt;

&lt;h1 id=&quot;day-5-data-modeling-sql-erd-postgres-and-active-directory&quot;&gt;Day 5: Data Modeling, SQL, ERD, Postgres and Active Directory&lt;/h1&gt;

&lt;p&gt;Started off the day at 9am with Slips - remember those? Our digital flashcards! Stand up in front of the class and face your fears!&lt;/p&gt;

&lt;h2 id=&quot;erd-and-databases-15-hours&quot;&gt;ERD and Databases: 1.5 Hours&lt;/h2&gt;
&lt;p&gt;We reviewed and broke out into groups to draw out our very first Entity Relationship Diagram (ERD for short!) We learned how to identify and diagram one-to-one, one-to-many and many-to-many relationships between data entities and discussed data normalization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/tunr-erd.png&quot; alt=&quot;erd&quot; /&gt;&lt;/p&gt;
&lt;center&gt;a simple ERD for our tunr app&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;active-record-25-hours&quot;&gt;Active Record: 2.5 hours&lt;/h2&gt;
&lt;p&gt;This class was massive. We went head first into ORMs, object relational mapping - A programming technique for converting data between incompatible type systems in object-oriented programming languages. Active Record is an ORM.&lt;/p&gt;

&lt;p&gt;We created our Postgres database, setup our SQL Schema and Seeded into the Database. Super cool stuff! From here, we did a full walkthrough, following the instructor, on a full implementation of CRUD (create, read, update, delete functionality) application within Active Record. There were a lot of questions and a great discussion on rail’s ‘Convention over Configuration’ mindset.&lt;/p&gt;

&lt;p&gt;Lastly, during the last 30 minutes of class, we reviewed everything from the last 2 hours and since it was Friday – we broke exactly at 5pm to partake in GA’s (free) happy hour that’s offered to students every Friday.&lt;/p&gt;

&lt;p&gt;Whew! What a week. I hit some ups but mostly chilled at the bottom of The Emotional Cycle of Change, not a fun place to be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/graph.jpeg&quot; alt=&quot;emotional cycle of change&quot; /&gt;&lt;/p&gt;
&lt;center&gt;The Emotional Cycle of Change&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
But I’m proud that I stuck with it and gave it my all. This week was tough but I’m much stronger than I was on Monday and even more determined.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have questions or suggestions of things you would like to learn in regards to the course, please let me know in the comments! Or shoot me a note. I’d love to hear from you. Until next time.&lt;/p&gt;
</description>
				<pubDate>Sun, 09 Oct 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/10/09/week4.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/10/09/week4.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 3 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;HI! I’m glad you decided to join us again. This week is Project Week! Let’s dive in.&lt;/p&gt;

&lt;h1 id=&quot;project-01&quot;&gt;Project 01&lt;/h1&gt;
&lt;p&gt;For this project, we were tasked to create a familiar game with HTML, CSS, and JS. We were to choose one of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tower of Hanoi&lt;/li&gt;
  &lt;li&gt;Trivia (Self-scoring)&lt;/li&gt;
  &lt;li&gt;Flash Cards&lt;/li&gt;
  &lt;li&gt;Simon&lt;/li&gt;
  &lt;li&gt;Hangman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
This was an opportunity to be creative and work through some tough programming challenges. I was very excited.&lt;/p&gt;

&lt;p&gt;During Project Week, we do not have classes. Instead, we have all day Monday, Tuesday, and our projects were due on Wednesday at 2:30pm.&lt;/p&gt;

&lt;h1 id=&quot;technical-requirements&quot;&gt;Technical Requirements&lt;/h1&gt;

&lt;p&gt;The app must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Render in the browser&lt;/li&gt;
  &lt;li&gt;Include separate HTML / CSS / JavaScript files&lt;/li&gt;
  &lt;li&gt;Stick with KISS (Keep It Stupid Simple) and DRY (Don’t Repeat Yourself) principles&lt;/li&gt;
  &lt;li&gt;Use Javascript or jQuery for DOM manipulation&lt;/li&gt;
  &lt;li&gt;Deploy online, using Github Project pages.&lt;/li&gt;
  &lt;li&gt;Use semantic markup for HTML and CSS (adhere to best practice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-i-did-hangman&quot;&gt;What I did: Hangman&lt;/h1&gt;
&lt;p&gt;I wanted to code a game that two people could play, was interactive, fun, and provided a challenge.  So, obviously, I picked Hangman.&lt;/p&gt;

&lt;p&gt;First, I wrote out pseudocode (a high-level step-by-step of what I want to code in human terms) for all of the logic and tasks I needed to complete in the game.&lt;/p&gt;

&lt;p&gt;Next, I started out building the content using HTML. Once most of the elements were on the page, I moved over to my CSS file to selector my color scheme and layout.&lt;/p&gt;

&lt;p&gt;Moving on to logic, within my Javascript document, I created my variables and started coding my functions.&lt;/p&gt;

&lt;p&gt;The first function takes a look at the word typed into the input box and splits it into its own array. From there, the function will display the length of the word and dashes will appear on the page.&lt;/p&gt;

&lt;p&gt;The next function runs when player two clicks on a letter in the alphabet box. It will check to see if the letter is in the secret word. Using an IF statement, if you guess right, the letter will appear on the dashes. If you guess wrong, a body part will appear.&lt;/p&gt;

&lt;h1 id=&quot;the-final-product&quot;&gt;The Final Product&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/hangman-main.png&quot; alt=&quot;hangman-main&quot; /&gt;
&lt;img src=&quot;/img/hangman2.png&quot; alt=&quot;hangman&quot; /&gt;
&lt;img src=&quot;/img/hangman.png&quot; alt=&quot;hangman2&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Fun fact: I drew the hangman gallows and body parts in an old school app, Mac Paintbrush&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/LWatsonlm/Two-Player-Hangman&quot;&gt;Check out my Github here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;project-presentations&quot;&gt;Project Presentations&lt;/h1&gt;

&lt;p&gt;Presentations were science-fair style. 7-8 people were set up at a time, and other students walked around playing your game and asking questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What would you do differently?&lt;/li&gt;
  &lt;li&gt;What are you most proud of?&lt;/li&gt;
  &lt;li&gt;What did you learn?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
The proudest moment for me was when my classmates truly enjoyed playing my game! There’s a special feeling you get when you see all hours of work come together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/IMG_20160921_154243.jpg&quot; alt=&quot;people playing my game&quot; /&gt;
&lt;img src=&quot;/img/IMG_20160921_154849.jpg&quot; alt=&quot;people playing my game2&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Player One entering a secret word for Player Two to guess&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;day-4--5-es6-object-oriented-js-classes-and-functional-programming&quot;&gt;Day 4 &amp;amp;&amp;amp; 5: ES6, Object Oriented JS Classes, and Functional Programming&lt;/h1&gt;

&lt;p&gt;Project Week isn’t really a week at all. It’s more like Project Days. Anyway, for the last two days of the week, we went over Javascript’s ES6 update which is a significant update to the language, and the first update to the language since ES5 was standardized in 2009.&lt;/p&gt;

&lt;p&gt;For ES6, we reviewed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the history of ES and JS&lt;/li&gt;
  &lt;li&gt;Compare/contrast features of ES5 and ES6&lt;/li&gt;
  &lt;li&gt;Explain when to use var v.s. let v.s. const&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For OOJS, we reviewed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the importance of OOJS&lt;/li&gt;
  &lt;li&gt;Describe the role of ES2015 Classes and how they work&lt;/li&gt;
  &lt;li&gt;Use the new keyword to create objects with shared properties&lt;/li&gt;
  &lt;li&gt;Create a class that inherits from another using the extends and super keywords&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For Functional Programming, we reviewed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identify the benefits of pure functions and avoiding side effects&lt;/li&gt;
  &lt;li&gt;Define immutability and how it relates to pure functions&lt;/li&gt;
  &lt;li&gt;Explain what recursion is and why we use it&lt;/li&gt;
  &lt;li&gt;Explain the concepts of first class and higher order functions&lt;/li&gt;
  &lt;li&gt;Use filter, map, reduce, sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;whew-what-a-week&quot;&gt;Whew! What a week!&lt;/h1&gt;

&lt;p&gt;Still feeling the high from project week.  If you have questions or suggestions of things you would like to learn in regards to the course, please shoot me an email at &lt;a href=&quot;latoyamwatson@gmail.com&quot;&gt;latoyamwatson@gmail.com&lt;/a&gt;! I’d love to hear from you. Until next time!&lt;/p&gt;
</description>
				<pubDate>Sun, 25 Sep 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/09/25/week3.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/09/25/week3.html</guid>
			</item>
		
			<item>
				<title>Is Coding Bootcamp Right for You? Week 2 in The Life of a Coding Bootcamper</title>
				<description>&lt;p&gt;HI! I’m glad you decided to join us again. Super quick recap: I decided to start documenting my weekly experience with General Assembly in hopes I can help decide if a coding bootcamp is right for you.
Let’s get into it!&lt;/p&gt;

&lt;h1 id=&quot;checkpoint-01&quot;&gt;Checkpoint 01&lt;/h1&gt;
&lt;p&gt;9am - 10am: Our first quiz. Every week, we have a mini quiz to review the previous week. You must turn in your work no later than 10am.&lt;/p&gt;

&lt;p&gt;At General Assembly, there isn’t a grading system. You’re free to ask questions and the instructors will provide feedback. The checkpoint is mostly for you to get a feel of your understanding of the material.&lt;/p&gt;

&lt;h1 id=&quot;day-1--2-javascript-and-dom-with-jquery&quot;&gt;Day 1 &amp;amp;&amp;amp; 2: Javascript and DOM with jQuery&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/tweet.png&quot; alt=&quot;tweet from lmwatsonn&quot; /&gt;&lt;/p&gt;
&lt;center&gt;How I felt the entire second week&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;javascript-objects-and-functions-25-hours&quot;&gt;Javascript Objects and Functions: 2.5 hours:&lt;/h2&gt;

&lt;p&gt;Javascript, our first programming language to tackle! Woohoo! We tackled topics such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If, Else If statements&lt;/li&gt;
  &lt;li&gt;Loops&lt;/li&gt;
  &lt;li&gt;Functions&lt;/li&gt;
  &lt;li&gt;Methods&lt;/li&gt;
  &lt;li&gt;Hoisting&lt;/li&gt;
  &lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dom-with-jquery-25-hours&quot;&gt;DOM with jQuery: 2.5 hours:&lt;/h2&gt;

&lt;p&gt;Next, we went over The Document Object Model (DOM). The DOM provides a structured representation of the [HTML] document. The nodes of every document are organized in a tree structure, called the DOM tree. It’s a bit abstract but here’s a visual representation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/DOM.png&quot; alt=&quot;the DOM&quot; /&gt;&lt;/p&gt;
&lt;center&gt;The DOM ... dun, dun dun!&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In order to interact with The DOM, we used jQuery, a Javascript library. A game changer. jQuery is fast, it’s light, and it’s simple. It became instantly more fun to use than vanilla Javascript.&lt;/p&gt;

&lt;p&gt;At the end of the day, we were assigned two homework assignments, remember homework is always due on Thursday no later than 9am.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;day-3-javascript-events-callbacks--lab&quot;&gt;Day 3: Javascript Events, Callbacks &amp;amp; Lab&lt;/h1&gt;

&lt;p&gt;First thing in the morning - Review / Code Challenge. The day starts at 9am and the floor is open for students to ask questions on pretty much anything.&lt;/p&gt;

&lt;p&gt;After the questions have been answered, we are given a mini code challenge to kick off the day. Code challenges do not get turned in.&lt;/p&gt;

&lt;h2&gt;Javascript Events/Callbacks: 1.5 hours&lt;/h2&gt;
&lt;p&gt;During this lesson, we reviewed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Selecting elements in jQuery vs. vanilla Javascript&lt;/li&gt;
  &lt;li&gt;$(this) vs this&lt;/li&gt;
  &lt;li&gt;Synchronous and Asynchronous Program Execution&lt;/li&gt;
  &lt;li&gt;Lots and lots of in class practicing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Scope and Context: 1.5 hours&lt;/h2&gt;
&lt;p&gt;During this lesson, we reviewed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Context in regards to where functions are invoked&lt;/li&gt;
  &lt;li&gt;Scope in regards to where a variable can be referenced/used
    &lt;ul&gt;
      &lt;li&gt;Global scope and local scope&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;More in class practicing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Having a grasp on Scope within your code is key to becoming a great developer who writes clean code. This lesson felt more conceptual than previous ones but all was well.&lt;/p&gt;

&lt;p&gt;Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;h1 id=&quot;day-4--5-lab---building-an-atm&quot;&gt;Day 4 &amp;amp;&amp;amp; 5: Lab - Building an ATM&lt;/h1&gt;

&lt;p&gt;The lab was assigned to us Thursday at 2:30pm and due on Friday at 2:30pm. For our first lab, we were given a lot of time to complete. However, upcoming labs will be assigned and due the same day.&lt;/p&gt;

&lt;p&gt;The assignment: Building an application to track checking and savings account balances. Here are the requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users can deposit money into one of the bank accounts&lt;/li&gt;
  &lt;li&gt;Users can withdraw money from one of the bank accounts
    &lt;ul&gt;
      &lt;li&gt;Make sure the balance in an account can’t go negative. If a user tries to withdraw more money than exists in the account, ignore the transaction.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The color of a bank account should reflect its balance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
I had a lot of fun building the ATM. Feeling especially proud of my event listeners on the buttons and getting the deposit and withdraw functionality working. Today was a good day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/atm.png&quot; alt=&quot;atm&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Screenshot of my ATM Lab Submission&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
Confidence level (1-5): 5
Optimistic level: High&lt;/p&gt;

&lt;p&gt;Next week is PROJECT 01 WEEK! Get hype! Okay, until next time - chat soon!&lt;/p&gt;
</description>
				<pubDate>Tue, 20 Sep 2016 00:00:00 -0400</pubDate>
				<link>/coding-bootcamp/2016/09/20/week2.html</link>
				<guid isPermaLink="true">/coding-bootcamp/2016/09/20/week2.html</guid>
			</item>
		
	</channel>
</rss>
